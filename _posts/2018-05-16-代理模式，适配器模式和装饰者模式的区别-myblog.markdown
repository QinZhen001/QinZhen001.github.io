---
layout:     post
title:      "代理模式,适配器模式和装饰者模式的区别"
date:       2018-05-16 23:25:00
author:     "Qz"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - DesignPattern
---

> “Yeah It's on. ”


## 正文
[网页链接](https://blog.csdn.net/lulei9876/article/details/39994825)


代理模式和装者模式最重要的区别在于它们的意图和设计目的。


### 装饰者模式
在不改变接口的前提下，动态扩展对象的访问。
动态继承，让类具有**在运行期改变行为的能力**。
装饰者模式，突出的是运行期增加行为，这和继承是不同的，继承是在编译期增加行为。

　　**强调：增强**


### 代理模式
在不改变接口的前提下，控制对象的访问。

1.从封装的角度讲，是为了解决类与类之间相互调用而由此导致的耦合关系，可以说是接口的另外一个层引用。

　　　　比如：在a类->b代理->c类这个关系中，c类的一切行为都隐藏在b中。即调用者不知道要访问的内容与代理了什么对象。


2.从复用的角度讲，可以解决不同类调用一个复杂类时，仅仅因较小的改变而导致整个复杂类新建一个类

　　　　比如：a类->c类1；b类->c类2。
　　　　可以变为a类->ca代理类->c类；b类->cb代理类-c类。
　　　　
　　代理模式，是类之间的封装和（某方面的）复用。
　　
　　**强调：限制**
　　
　　
　　
　　
### 适配器模式
一个适配允许通常因为接口不**兼容**而不能在一起工作的类工作在一起，做法是将类自己的接口包裹在一个已存在的类中。


适配器的特点在于兼容，从代码上的特点来说，适配类与原有的类具有相同的接口，并且持有新的目标对象。

就如同一个三孔转2孔的适配器一样，他有三孔的插头，可以插到三孔插座里，又有两孔的插座可以被2孔插头插入。

适配器模式是在于对原有3孔的改造。

在使用适配器模式的时候，我们必须同时持有原对象，适配对象，目标对象

　**强调：兼容**


----------
----------


代理模式的目的是，当直接访 问本体不方便或者不符合需要时，为这个本体提供一个替代者。本体定义了关键功能，而代理提供对它的访问，或者在访问本体之前做一些额外的事情。装饰者模式的作用就是为对象动态增加行为。换句话说，代理模式强调一种关系（Proxy与它的实体之间的关系），**这种关系 可以静态的表达，也是说，这种关系在一开可以被确定**。而装饰者模式用于**一开始不能确定对象的全部功能时**。代理模式通常只有一层‘代理-本体’的用，而装饰者模式经常会形成一条长长的装饰链。 



## 总结
* 适配器模式是将一个类(a)通过某种方式转换成另一个类(b).
* 装饰模式是在一个原有类(a)的基础之上增加了某些新的功能变成另一个类(b).
* 代理模式是将一个类(a)转换成具体的操作类(b).














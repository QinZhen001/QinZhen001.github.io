---
layout:     post
title:      "前端框架相关学习"
date:       2018-03-18 14:16:00
author:     "Qz"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - Other
---

> “Yeah It's on. ”


## 正文

Vue2.1.7源码学习
[http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/](http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/)


JavaScript实现MVVM
[http://hcysun.me/2016/04/28/JavaScript%E5%AE%9E%E7%8E%B0MVVM%E4%B9%8B%E6%88%91%E5%B0%B1%E6%98%AF%E6%83%B3%E7%9B%91%E6%B5%8B%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8F%98%E5%8C%96/](http://hcysun.me/2016/04/28/JavaScript%E5%AE%9E%E7%8E%B0MVVM%E4%B9%8B%E6%88%91%E5%B0%B1%E6%98%AF%E6%83%B3%E7%9B%91%E6%B5%8B%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8F%98%E5%8C%96/)

### 框架挑选
不谈场景论好坏都是耍流氓。
你要做的应该是该用 Vue 的时候用 Vue，该用 React 的时候用 React，该用 jQuery 的时候用 jQuery。

至于如何挑选框架，只有老司机会选，你首先要变成一个老司机。


### 组件
组件已经是各种框架的共识，你必须知道什么是组件。组件的定义就是……一个很抽象的东西。我的理解是变形金刚合体的时候，有人组成头部，有人组成裆部，这些人就是组件了。

每个组件可以由其他小组件组成。比如裆部可以分成柱状组件和两球状组件。

至于组件的严格定义，并没有。


### 组件的状态（state）
一个组件可以有多种形态，比如上面的柱状组件可以是硬直状态，也可以是疲软状态。(=.= Orz)

### JSX V.S. 模板
JSX 适合逻辑多的场景，模板适合逻辑少的场景。

* [Tutorial: JSX](http://buildwithreact.com/tutorial/jsx)
* [JavaScript Templating](https://en.wikipedia.org/wiki/JavaScript_templating)


### Colocation
把该放在一起的东西放在一起。

跟几年前的 HTML、CSS、JS 分离对应。


### Separation of Concerns
[关注点分离](https://zh.wikipedia.org/wiki/%E5%85%B3%E6%B3%A8%E7%82%B9%E5%88%86%E7%A6%BB)

前端的关注点分离就是 HTML、CSS、JS 分离。

### Declarative Programming 声明式编程
你说有啥，就有啥。
[https://en.wikipedia.org/wiki/Declarative_programming](https://en.wikipedia.org/wiki/Declarative_programming)

### Imperative Programming 命令式编程
你让我干啥，我就干啥。
[https://en.wikipedia.org/wiki/Imperative_programming](https://en.wikipedia.org/wiki/Imperative_programming)


### view = render(state)
给我一个 state（数据），我就造出一个 view（DOM）。



### Virtual DOM
> 计算机科学领域的任何问题，都可以通过添加一个中间层来解决。

Virtual DOM 就是应用与 DOM API 之间的中间层。

>Manual DOM manipulation is messy and keeping track of the previous DOM state is hard. A solution to this problem is to write your code as if you were recreating the entire DOM whenever state changes. Of course, if you actually recreated the entire DOM every time your application state changed, your app would be very slow and your input fields would lose focus.

>virtual-dom is a collection of modules designed to provide a declarative way of representing the DOM for your app. So instead of updating the DOM when your application state changes, you simply create a virtual tree or VTree, which looks like the DOM state that you want. virtual-dom will then figure out how to make the DOM look like this efficiently without recreating all of the DOM nodes.

自己写一个 Virtual DOM 库并不难。

### onclick="clickHandler" 的问题
clickHandler 是全局变量，这很烦人。

全局变量借祸害。

### 状态管理
总得来说前端对状态管理还没有达成共识，但又没有特别大的分歧。

可以了解一下 Flux、Redux、MobX、Vuex 和 Rx.js（反正名字里都有一个 x）。

状态管理主要涉及 event、state 和 view 的变化的管理，主要分歧在于 event 与 state 变化的管理方式，各种方案皆有优劣。



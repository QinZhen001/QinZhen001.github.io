---
layout:     post
title:      "Es6中的箭头函数"
date:       2017-12-30 22:02:00
author:     "Qz"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - ES6
---

> “Yeah It's on. ”


## 正文


[网页链接](http://blog.csdn.net/itpinpai/article/details/52182093)


### 基本用法：
ES6中允许使用“箭头”(=>)定义函数
`var f   = v => v;  `
上面代码相当于：
```
var f = function( v )  {  
    return v;  
}  
```

### 根据箭头函数有参数和无参数来区分
1. 无参数的箭头函数
var f = () => 5;  
2. 有参数的箭头函数
var sum = ( a, b) => a + b;  

**有的函数体内的语句大于一条的话，它的写法如下使用一个大括号将其括起来，并使用return语句返回**

`var sum = (a, b) => { return a+b;}`

**由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象时，必须在对象外面加一个大括号**

`var getFunction = id => ({id: id, anme: "Temp"});  `

### 箭头函数也可以与变量解构结合使用
`const full = ({first, last}) => first +"  "+ last;`

等同于
```
function full(person) {  
    return person.first +"  "+ person.last;  
}  
```  

### 使用rest参数与箭头函数结合的例子
```
const numbers = (...nums) => nums;  
numbers(1,2,3,4,5,6,7,8,9); //[1,2,3,4,5,6,7,8,9]  
//...nums 表示的是一个数组  
const headAndTail = ( head, ...tail) => [head, tail];  
headAndTail(1,2,3,4,5,6,7,8,9);// [1, [2,3,4,5,6,7,8,9]]  
```

## 使用箭头函数注意几点：
1. **函数体内的this对象就是定义时所在的对象，而不是使用时所在对象(这点很重要)**
2. 不可以当作构造函数使用，也就是不能用new命令实例化一个对象，否则会抛出一个错误；
3. 不可以使用arguments对象，该对象在函数体内不存在，如果要用的话，可以用rest参数代替；
4. 不可以使用yield命令，箭头函数不能用作Generator函数；


----------


```
var x=11;
var obj={
 x:22,
 say:()=>{
   console.log(this.x);
 }
}
obj.say();
//输出的值为11
```

所谓的定义时候绑定，就是this是继承自父执行上下文！！中的this，比如这里的箭头函数中的this.x，箭头函数本身与say平级以key:value的形式，也就是箭头函数本身所在的对象为obj，而obj的父执行上下文就是window，因此这里的this.x实际上表示的是window.x，因此输出的是11。**(this只有在函数被调用，或者通过构造函数new Object()的形式才会有this)**


----------

```
var a=11
function test1(){
  this.a=22;
  let b=function(){
    console.log(this.a);
  };
  b();
}
var x=new test1();
输出11
```

箭头函数情况：

```
var a=11;
function test2(){
  this.a=22;
  let b=()=>{console.log(this.a)}
  b();
}
var x=new test2();
//输出22
```


**很奇怪对不对，我是这样理解的，ES6中定义的时候绑定this的具体含义，应该继承的是父执行上下文里面的this**


注意：简单对象（非函数）是没有执行上下文的！

箭头函数中，this指向的固定化，并不是因为箭头函数内部有绑定this的
机制，实际原因是箭头函数根本没有自己的this，导致内部的this就是外
层代码块的this。正是因为它没有this，所以也就不能用作构造函数。


我们可以来模拟ES5中的箭头函数转化：
```
// ES6
function foo() {
  setTimeout(() => {
    console.log('id:', this.id);
  }, 100);
}

// ES5
function foo() {
  var _this = this;

  setTimeout(function () {
    console.log('id:', _this.id);
  }, 100);
}
```



所以在定义对象的时候，定义对象属性，里面的this指向的一般是全局，或者这个对象所在的那个环境中的this。





---
layout:     post
title:      "前端面试"
date:       2018-02-25 12:54:00
author:     "Qz"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - 面试
---

> “Yeah It's on. ”


## HTML5类

### 语义化标签

引入语义化标签的优点：
1. 比`<div>`标签有更加丰富的含义，方便开发与维护
2. 搜索引擎能更方便的识别页面的每个部分
3. 方便其他设备解析（如移动设备、盲人阅读器等）

所谓语义化标签就是一种我们仅通过标签名就能判断出该标签内容的语义的标签
如：`<article>,<section>,<nav>,<aside>,<header>,<footer>`

**header**
通常被放置在页面或者页面中某个区块元素的顶部，包含整个页面或者区块的标题、简介等信息，起到引导与导航的作用。


我们不但可以放置页面或者页面中某个区块的标题，还可以放置搜索表单、logo图片等元素，按照最新的W3C标准，我们还可以放置`<nav>`导航栏。

**nav**
表示页面的导航，可以通过导航连接到网站的其他页面，或者当前页面的其它部分。

`<nav>`不但可以作为页面独立的导航区域存在，我们还可以`<header>`标签中使用。此外，`<nav>`标签还可以显示在侧边栏中。由此可见，一个页面之中可以有多个`<nav>`标签。


根据HTML5标准，`<nav>`标签只用于页面的主要导航部分。因为搜索引擎或者屏幕阅读器会根据`<nav>`标签来确定网站的主体内容，所以并不是任意一组超链接都适合放置在`<nav>`标签中,我们只要将主要的，基本的链接组放进`<nav>`即可,对于有辅助性的页脚链接则不推荐使用`<nav>`标签。

>HTML5规范不允许将`<nav>`标签嵌套在`<address>`标签中使用。

**aside**
所包含的内容不是页面的主要内容、具有独立性，是对页面的补充。

`<aside>`标签一般使用在页面、文章的侧边栏、广告、友情链接等区域。


**footer**
一般被放置在页面或者页面中某个区块的底部，包含版权信息、联系方式等信息。

跟`<header>`标签一样，`<footer>`标签的使用个数没有限制，可以在任意需要的区块底部使用。


**article**
表示包含于一个文档、页面、应用程序或网站中的一段独立的内容，可以被独立的发布或者重新使用文章标记标签。

`<article>`标签应该使用在相对比较独立、完整的的内容区块，所以我们可以在一篇博客、一个论坛帖子、一篇新闻报道或者一个用户评论中使用它。通常情况下，一个`<article>`元素包括标题、正文和脚注。和`<nav>`标签一样，该标签同样不能用在`<address>`标签中；

>`<article>`标签还可以嵌套使用，但是它们必须是部分与整体的关系


**section**
是一个主题性的内容分组，**通常用于对页面进行分块或者对文章等进行分段**

`<section>`标签所包裹的是有一组相似的主题的内容，可以用这个标签来实现文章的章节、标签式对话框中的各种标签页等类似的功能。

`<section>`通常包含一个头部`<header>`、可能还会包含一个尾部`<footer>`。

`<div> <section> <article>`三者的比较：
* `<div>`：应用广泛，只要我们想为一个区域定义一个样式或者为其添加JS行为，就可以使用div标签
* `<section>`：包含的内容是一个明确的主题，通常有标题区域
* `<article>`:如果我们的页面中需要一个单独的模块来实现一个单独的功能，就用`<article>`，其他的时候都用`<section>`。



## DOM事件类

### 事件级别

| DOM0 | element.onclick = function(){}                                           |
| ---- | ------------------------------------------------------------------------ |
| DOM2 | element.addEventListener('click',function(){},false)                     |
| DOM3 | element.addEventListener('keyup',function(){},false)(事件类型增加了很多) |


>addEventListener()的第三个参数
>* true - 事件句柄在捕获阶段执行
>* false- 默认。事件句柄在冒泡阶段执行



（第三个参数是）A Boolean indicating whether events of this type will be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree.



**当没有下级结点，这个参数失去意义，谁先注册事件，谁就先执行**







```
<div id="outer">
	<div id="inner">
		gogo
	</div>
</div>

get('inner').addEventListener('click',function(e){
	console.log('inner,false');
},false);
get('inner').addEventListener('click',function(e){
	console.log('inner,true');
},true);

get('outer').addEventListener('click',function(e){
	console.log('outer,false');
},false);
get('outer').addEventListener('click',function(e){
	console.log('outer,true');
},true);


```



```
// 输出

outer,true
inner,false
inner,true
outer,false
```














### 描述DOM事件捕获的具体流程
window -> document -> html -> body -> ... -> 目标元素

### Event对象的常见应用
* event.preventDefault()
* event.stopPropagation() //阻止冒泡
* event.stopImmediatePropagation() 
* event.currentTarget //返回绑定事件的元素(和this 的作用是差不多的)
* event.target //当前被触发的元素

#### event.stopImmediatePropagation()

如果某个元素有多个相同类型事件的事件监听函数,则当该类型的事件触发时,多个事件监听函数将按照顺序依次执行.如果某个监听函数执行了 event.stopImmediatePropagation()方法,则除了该事件的冒泡行为被阻止之外(event.stopPropagation方法的作用),该元素绑定的后序相同类型事件的监听函数的执行也将被阻止.

#### event.currentTarget用来事件委托(事件代理)
target事件委托的定义：本来该自己干的事，但是自己不干，交给别人来干。一般用到for循环遍历节点添加事件的时候都可以用事件委托来做，可以提高性能。

```html
<input type="text" id="text">
    <input type="button" value="添加" id="button">
    <ul>
        <li>第1个<button class="btn" id="1">删除</button></li>
        <li>第2个<button class="btn" id="2">删除</button></li>
        <li>第3个<button class="btn" id="3">删除</button></li>
    </ul>
    <script>
            var button = document.getElementById("button");
            var text = document.getElementById("text");
            var ul = document.getElementsByTagName("ul")[0];
            var btnClass = document.getElementsByClassName("btn");        
        button.onclick = function(){
            var deleteButton = document.createElement("button");    
            var value = text.value;
                deleteButton.setAttribute("class","btn");
            var deleteText = document.createTextNode("删除");
                deleteButton.appendChild(deleteText);
            var li = document.createElement("li");
            var liText = document.createTextNode(value);
                li.appendChild(liText);
                li.appendChild(deleteButton);
                ul.appendChild(li);
            for(var i=0;i<btnClass.length;i++){
                btnClass[i].onclick=function(){
                this.parentNode.parentNode.removeChild(this.parentNode);
            }
        }
        }

            for(var i=0;i<btnClass.length;i++){
                btnClass[i].onclick=function(){
                    this.parentNode.parentNode.removeChild(this.parentNode);
                }
            }
    </script>
```


为什么在button.onclick里面也需要一个for循环，给每个删除按钮添加事件呢？因为外面的for循环，在文档刷新时给页面中存在的三个删除按钮添加了点击事件，而后来添加的删除按钮并没有绑定事件，导致页面中存在的三个li标签可以删除，而后来新添加的li不能删除这个问题。我们使用事件委托来做就不用这么麻烦了

```html
<script>
            var button = document.getElementById("button");
            var text = document.getElementById("text");
            var ul = document.getElementsByTagName("ul")[0];
            var btnClass = document.getElementsByClassName("btn");        
        button.onclick = function(){
            var deleteButton = document.createElement("button");    
            var value = text.value;
                deleteButton.setAttribute("class","btn");
            var deleteText = document.createTextNode("删除");
                deleteButton.appendChild(deleteText);
            var li = document.createElement("li");
            var liText = document.createTextNode(value);
                li.appendChild(liText);
                li.appendChild(deleteButton);
                ul.appendChild(li);
            }
            ul.onclick = function(event){
                var tar = event.target;
                if(tar.nodeName.toLowerCase() == "button"){
                    tar.parentNode.parentNode.removeChild(tar.parentNode);
                }
            }
</script>
```

给ul添加了点击事件，点击ul里面的子元素，event.target都会返回当前点击的元素节点，做一个判断，如果点击了button标签，删除这个li节点。由于添加的li都在ul节点里面，所以并不用再去添加li事件里面去写代码了


>* event.target.nodeName  　　//获取事件触发元素标签name(全大写)
>* event.target.id　　　　　　　//获取事件触发元素id
>* event.target.className　　//获取事件触发元素classname
>* event.target.innerHTML　　//获取事件触发元素的内容



### 自定义事件
```js
var eve = new Event('custome')

element.addEventListener('custome',function(){
    console.log('custome')
})
element.dispatchEvent(eve)
```

## 面向对象类

### new运算符

>foo为构造函数
1. 一个对象被创建。**它继承foo.prototype**
2. 构造函数foo被执行。执行时，相应的参数会被传入，同时上下文(this)会被指定为这个新实例(也就是步骤1创建的对象)。**new foo等同于new foo(),只能用在不传递任何参数的情况。**
3. 如果构造函数返回了一个"对象"，那么这个对象会取代整个new出来的结果。如果构造函数没有返回对象，那么new出来的结果为步骤1创建的对象。

----------

var a = new A()
显而易见， 对象a是继承于A.prototype的， 那么A.prototype这个自动生成的对象，又是从哪出来的呢？

答案是： A.prototype 这个对象是Object和Object.prototype的产物， 当我们

```js
function A() {
    
}
```


的时候， 系统后台调用new Object()这样生成了对象A.prototype， 另外A.prototype这个函数会自带一个属性construcor，这个属性的值是函数A



### 原型和原型链
**所有的引用类型（数组、对象、函数），都有一个__proto__属性，属性值是一个普通的对象**

**所有的函数，都有一个 prototype 属性，属性值也是一个普通的对象**

所有的引用类型（数组、对象、函数），`__proto__`属性值指向它的构造函数的 ”prototype“ 属性值

当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的 `__proto__`（即它的构造函数的prototype）中寻找。

![enter description here][9]

举个栗子:
```
    var obj = {};
    obj.a = 100;
    var arr = [];
    arr.a = 100;
    function fn() {
    }
    fn.a = 100;

    console.log(obj.__proto__); //Object{}
    console.log(arr.__proto__); //[Symbol(Symbol.unscopables):Object]
    console.log(fn.__proto__); //function(){}
    console.log(fn.prototype); //Object{}
    console.log(obj.__proto__ === Object.prototype) //true
```

----------

```
   // 构造函数
    function Foo(name, age) {
        this.name = name
    }

    Foo.prototype.alertName = function () {
        alert(this.name)
    };
    //创建事例
    var f = new Foo('zhangsan')
    f.printName = function () {
        console.log(this.name)
    };
    // 测试
    f.printName();
    f.alertName();
```

----------


```
    //动物
    function Animal() {
        this.eat = function () {
            console.log('animal eat');
        }
    }
    // 狗
    function Dog() {
        this.bark = function () {
            console.log('dog bark')
        }
    }
    Dog.prototype = new Animal();
    // 哈士奇
    var hashiqi = new Dog()
```




### 创建对象的三种方式
1. 字面量
var o1 = {name:"o1"}
2. 构造函数
var M = function(name){
    this.name = name
}
var o2 = new M("o2")
3. Object.create
var p = {name:"p"}
var o3 = Object.create(p)

**o3.\_\_proto === p 
p是o3的原型对象
o3本身自己是空对象，并没有name属性**

### Object.create 和new区别(扩展)

[网页链接](http://blog.csdn.net/blueblueskyhua/article/details/73135938)

Object.create 创建的对象是用原型链来连接的

Object.create的实现方式：
```js
Object.create =  function (o) {
    var F = function () {};
    F.prototype = o;
    return new F();
};
```

**这种方法比"构造函数法"简单，但是不能实现私有属性和私有方法，实例对象之间也不能共享数据，对"类"的模拟不够全面。**

可以看出来。Object.create是内部定义一个对象，并且让F.prototype对象 赋值为引进的对象/函数 o，并return出一个新的对象。

简单实现new:
```js
var new2 = function(func){
    var o = Object.create(func.prototype)
    var k = func.call(o) //转移上下文 this指向o实例
    if(typeof k === 'object'){
        return k
    }else{
        return o
    }
}
```






## 渲染机制类

### DOCTYPE
DTD(document type definition,文档类型定义)是一系列的语法规则，用来定义XML或(X)HTML的文件类型。浏览器会使用它来判断文档类型，决定使用何种协议来解析，以及切换浏览器模式。

DOCTYPE是用来声明文档类型和DTD规范的，一个主要的用途便是文件的合法性检验。如果文件代码不合法，那么浏览器解析时便会出错。

HTML5
`<!DOCTYPE html>`

### 浏览器渲染过程

1. 根据HTML结构生成DOM Tree
2. 根据CSS生成CSSOM
3. 将DOM和CSSOM整合形成RenderTree,同时进行Layout
4. 根据RenderTree开始渲染(Painting)和展示(Display)
5. 遇到`<script>`时，会执行并阻塞渲染



### **CSS加载会造成阻塞吗**

- `CSS`不会阻塞`DOM`解析，但会阻塞`DOM`渲染。
- `CSS`会阻塞JS执行，并不会阻塞JS文件下载



DOM 和 CSSOM通常是并行构建的，所以**「CSS 加载不会阻塞 DOM 的解析」**。



然而由于Render Tree 是依赖DOM Tree和 CSSOM Tree的，所以它必须等到两者都加载完毕后，完成相应的构建，才开始渲染，因此，**「CSS加载会阻塞DOM渲染」**。



由于 JavaScript 是可操纵 DOM 和 css 样式 的,如果在修改这些元素属性同时渲染界面（即 JavaScript 线程和 UI 线程同时运行）,那么渲染线程前后获得的元素数据就可能不一致了。

因此为了防止渲染出现不可预期的结果,浏览器设置 **「GUI 渲染线程与 JavaScript 引擎为互斥」**的关系。



---



有个需要注意的点就是：



**「有时候JS需要等到CSS的下载，这是为什么呢？」**



仔细思考一下，其实这样做是有道理的，如果脚本的内容是获取元素的样式，宽高等`CSS`控制的属性，浏览器是需要计算的，也就是依赖于`CSS`。浏览器也无法感知脚本内容到底是什么，为避免样式获取，因而只好等前面所有的样式下载完后，再执行`JS`。

JS文件下载和CSS文件下载是并行的，有时候CSS文件很大，所以JS需要等待。



因此,样式表会在后面的 js 执行前先加载执行完毕,所以**「css 会阻塞后面 js 的执行」**。



### SSR
SSR，服务器渲染。简单来说就是，服务器将每个要展示的页面都运行完成后，将整个相应流传送给浏览器，所有的运算在服务器端都已经完成，浏览器只需要解析 HTML 就行。


### 浏览器输入url到加载的过程
[网页链接](http://blog.csdn.net/xingxingba123/article/details/52743335)
1. 首先，在浏览器地址栏中输入url
2. **浏览器先查看浏览器缓存-系统缓存-路由器缓存，如果缓存中有，会直接在屏幕中显示页面内容。若没有，则跳到第三步操作。**
3. 在发送http请求前，需要域名解析(DNS解析)，解析获取相应的IP地址。
4. 浏览器向服务器发起tcp连接，与浏览器建立tcp三次握手。
5. 握手成功后，浏览器向服务器发送http请求，请求数据包。
6. 服务器处理收到的请求，将数据返回至浏览器
7. 浏览器收到HTTP响应
8. 读取页面内容，浏览器渲染，解析html源码
9. 生成Dom树、解析css样式、js交互
10. 客户端和服务器交互
11. ajax查询



**步骤2的具体过程是：**
* 浏览器缓存：浏览器会记录DNS一段时间，因此，只是第一个地方解析DNS请求；
* 操作系统缓存：如果在浏览器缓存中不包含这个记录，则会使系统调用操作系统，获取操作系统的记录(保存最近的DNS查询缓存)；
* 路由器缓存：如果上述两个步骤均不能成功获取DNS记录，继续搜索路由器缓存；
* ISP缓存：若上述均失败，继续向ISP搜索。

>Internet Service Provider，互联网服务提供商

>迭代查询的过程如下:  . => com. => .exampl.com. => www.example.com. => IP adress

### 重排Reflow
DOM结构中的各个元素都有自己的盒子(模型)，这些都需要浏览器根据各种样式来计算并根据计算结果将元素放到它应该出现的位置，这个过程称之为Reflow。

#### 触发Reflow
当你增加,删除,修改DOM结点时，会导致Reflow或Repaint
当你移动DOM位置时，或者搞个动画的时候
当你修改CSS样式的时候
当你Resize窗口的时候(移动端没有这个问题)，或者是滚动的时候
当你修改网页的默认字体时



### 重绘Repaint
当各种盒子的位置，大小以及其他属性，例如颜色、字体大小等都确定下来后，浏览器于是便把这些元素按照各自的特性绘制一遍，于是页面的内容出现了，这个过程称之为repaint。

#### 触发Repaint
* DOM改动
* CSS改动


#### 减少Repaint次数
利用DocumentFragment

DocumentFragment 接口表示一个没有父级文件的最小文档对象。它被当做一个轻量版的 Document 使用，用于存储已排好版的或尚未打理好格式的XML片段。最大的区别是因为DocumentFragment不是真实DOM树的一部分，**它的变化不会引起DOM树的重新渲染的操作(reflow) ，且不会导致性能等问题。**

>所有的节点会被一次插入到文档中，而这个操作仅发生一个重渲染的操作，而不是每个节点分别被插入到文档中，因为后者会发生多次重渲染的操作。



可以使用document.createDocumentFragment 方法或者构造函数来创建一个空的 DocumentFragment.



### 渲染优化
* CSS放前面，JS放后面
* 懒加载
* 减少DOM查询，对DOM查询做缓存
* 减少DOM操作，多个操作尽量合并在一起执行
* 事件节流
* 尽早执行操作(如DOMContentLoaded)


#### 合并DOM插入
```
    var listNode = document.getElementById('list');
    var frag = document.createDocumentFragment();
    var x, li;
    for (x = 0; x < 10; x++) {
        li = document.createElement('li');
        li.innerHTML = "List item" + x;
        frag.appendChild(li);
    }
    listNode.appendChild(frag);
```
#### 事件节流
```
    var textarea = document.getElementById('text');
    var timeoutId;
    textarea.addEventListener('keyup', function () {
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(function () {
            //触发 change 事件
        }, 1000);
    })
```
#### 尽早操作
```
    window.addEventListener('load', function () {
        // 页面的全部资源加载完才会执行，包括图片，视频等
    });

    document.addEventListener('DOMContentLoaded', function () {
        // DOM 渲染完成即可，此时图片，视频还可能没有加载完
    });
```


### 加载资源优化
* 静态资源的压缩合并
* 静态资源的缓存
* 使用CND让资源加载更快
* 使用SSR后端渲染，数据直接突入到HTML中


## js基础类


### 通用事件绑定
```
 function bindEvent(elem, type, fn) {
        elem.addEventListener(type, fn);
    }

    var a = document.getElementById('link1');
    bindEvent(a, 'click', function (e) {
        e.preventDefault();
        alert('clicked-self');
    })
```




### cookie
* 本身用于客户端和服务器端通信、
* 但是它有本地存储的功能，于是就被“借用”
* 使用document.cookie = … 获取和修改即可



#### 缺点
* 存储量太小，只有4KB
* 所有的http请求都带着，会影响获取资源的效率
* API简单，需要封装

### locationStorage 和 sessionStorage
* HTML5专门为存储而设计，最大容量5M
* API简洁易用
* localStorage.setItem(key,value);localStorage.getItem(key)


### navigator & screen
```
// navigator
    var ua = navigator.userAgent;
    var isChrome = ua.indexOf('Chrome');
    console.log(isChrome);

// screen
    console.log(screen.width);
    console.log(screen.height);
```



## js运行机制类
**js是单线程的**(一个时间之内只能干一件事)



```
console.log('A')
while(true){

}
console.log('B')
```
// 只会输出A (因为是同步任务)



### 异步任务
* setTimeout和setInterval
* DOM事件
* ES6中的Promise

需要注意的是，setTimeout(不止它)只是将事件插入了"任务队列"，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，**所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。**

>http://www.ruanyifeng.com/blog/2014/10/event-loop.html

### 异步执行的运行机制

1. 所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。
2. 主线程之外，还存在一个"任务队列"（task queue）。只要异步任务有了运行结果，就在"任务队列"之中放置一个事件。
3.  一旦"执行栈"中的所有同步任务执行完毕，系统就会读取"任务队列"，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。
4. 主线程不断重复上面的第三步。

![enter description here][11]



只要主线程空了，就会去读取"任务队列"，这就是JavaScript的运行机制。这个过程会不断重复。


**因为js是单线程的，浏览器遇到setTimeout或者setInterval会先执行完当前的代码块，在此之前会把定时器推入浏览器的待执行事件队列里面，等到浏览器执行完当前代码之后会看一下事件队列里面有没有任务，有的话才执行定时器的代码。**



### 事件和回调函数
"任务队列"是一个事件的队列（也可以理解成消息的队列），IO设备完成一项任务，就在"任务队列"中添加一个事件，表示相关的异步任务可以进入"执行栈"了。主线程读取"任务队列"，就是读取里面有哪些事件。

"任务队列"中的事件，除了IO设备的事件以外，还包括一些用户产生的事件（比如鼠标点击、页面滚动等等）。只要指定过回调函数，这些事件发生时就会进入"任务队列"，等待主线程读取。

所谓"回调函数"（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。


"任务队列"是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，"任务队列"上第一位的事件就自动进入主线程。但是，由于存在后文提到的"定时器"功能，主线程首先要检查一下执行时间，某些事件只有到了规定的时间，才能返回主线程。

### Event Loop
主线程从"任务队列"中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）。

![enter description here][12]

上图中，主线程运行的时候，产生堆（heap）和栈（stack），栈中的代码调用各种外部API，它们在"任务队列"中加入各种事件（click，load，done）。只要栈中的代码执行完毕，主线程就会去读取"任务队列"，依次执行那些事件所对应的回调函数。


**执行栈中的代码（同步任务），总是在读取"任务队列"（异步任务）之前执行**。请看下面这个例子。
```
 var req = new XMLHttpRequest();
    req.open('GET', url);    
    req.onload = function (){};    
    req.onerror = function (){};    
    req.send();
```

上面代码中的req.send方法是Ajax操作向服务器发送数据，它是一个异步任务，意味着只有当前脚本的所有代码执行完，系统才会去读取"任务队列"。所以，它与下面的写法等价。


```
 var req = new XMLHttpRequest();
    req.open('GET', url);
    req.send();
    req.onload = function (){};    
    req.onerror = function (){};   
```

>回调函数的部分（onload和onerror），在send()方法的前面或后面无关紧要



## 页面性能类
提升页面性能的方法有哪些？
1. 资源压缩合并，减少HTTP请求
2. 非核心代码异步加载(异步加载方式，异步加载原理)
3. 利用浏览器缓存(缓存的分类，缓存的原理)
4. 利用CDN
5. 预解析DNS
`<meta http-equiv="x-dns-prefetch-control" content="on">`
`<link rel="dns-prefetch" href="//host_name_to_prefetch.com">`


### 域名收敛
域名收敛的意思就是建议将静态资源只放在一个域名下面，而非发散情况下的多个域名下。
上面也说到了，域名发散可以突破浏览器的域名并发限制，那么为要反其道而行之呢？因为因地制宜，不同情况区别对待，域名发散是 PC 时代的产物，而现在进入移动互联网时代，通过无线设备访问网站，App的用户已占据了很大一部分比重，而域名收敛正是在这种情况下提出的。


首先要知道，使用一个 http 请求去请求一个资源时，会经历些什么。简单而言：

1. DNS 域名解析 --> 
2. 发起 TCP 的 3 次握手 --> 
3. 建立 TCP 连接后发起 http 请求 --> 
4. 服务器响应 http 请求
5. ......略

在这里第一步，也是关键的第一步 DNS 解析，在移动端的 http 请求耗时中，DNS 解析占据了大部分时间。


因为在增加域的同时，往往会给浏览器带来 DNS 解析的开销。所以在这种情况下，提出了域名收敛，减少域名数量可以降低 DNS 解析的成本。







### js 延迟加载

1. 动态脚本加载
2. defer
3. async



```html
<script src="xxx.js" defer></script>		
```


```html
<script src="xxx.js" async></script>
```



异步加载的区别：
1. 给 js 脚本添加 defer属性，这个属性会让脚本的加载与文档的解析同步解析，然后在文档解析完成后再执行这个脚本文件，这样的话就能使页面的渲染不被阻塞。**多个设置了 defer 属性的脚本按规范来说最后是顺序执行的**，但是在一些浏览器中可能不是这样。**（defer 属性的脚本先于`DOMContentLoaded`事件执行）**

2. 给 js 脚本添加 async属性，这个属性会使脚本异步加载，不会阻塞页面的解析过程，但是当脚本加载完成后立即执行 js脚本，这个时候如果文档没有解析完成的话同样会阻塞。**多个 async 属性的脚本的执行顺序是不可预测的，一般不会按照代码的顺序依次执行**。



   

![](https://user-gold-cdn.xitu.io/2019/6/27/16b96e86f8fcfb58?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)










## 错误监控类

### 前端错误的分类
* 即时运行错误(代码错误)
* 资源加载错误

即时运行错误的捕获方式：
1. try...catch
2. window.onerror

资源加载错误捕获方式：
1. object.onerror
2. performance.getEntries()
3. Error事件捕获


```js
Error事件捕获

window.addEventListener('error',function(e){
    console.log('捕获',e)
},false)  //设置false 因为只能在捕获阶段响应
```

**延伸：跨域的js运行错误可以捕获吗，错误提示什么？**
1. 在script标签增加 crossorigin属性
2. 设置js资源响应头Access-Control-Allow-Origin:*


### 上报错误的基本原理
1. 采用Ajax通信方式上报
2. **利用Image对象上报**


```
利用Image对象上报


    (new Image()).src = 'http://baidu.com/test?error=tksjk...'
    // ?后面就可以添加错误信息了
    
```

## 算法类
* [快速排序](https://segmentfault.com/a/1190000009426421)
* [选择排序](https://segmentfault.com/a/1190000009366805)
* [希尔排序](https://segmentfault.com/a/1190000009461832)
* [堆栈](https://juejin.im/entry/58759e79128fe1006b48cdfd)
* [队列](https://juejin.im/entry/58759e79128fe1006b48cdfd)
* [链表](https://juejin.im/entry/58759e79128fe1006b48cdfd)
* [深入学习递归](https://segmentfault.com/a/1190000009857470)
* [波兰式和逆波兰式](http://www.cnblogs.com/chenying99/p/3675876.html)
* [波兰式和逆波兰式github地址](https://github.com/Tairraos/rpn.js/blob/master/rpn.js)




### 快速排序
```
var quickSort = function(arr) {
    if (arr.length <= 1) { return arr; }
    var pivotIndex = Math.floor(arr.length / 2);   //基准位置（理论上可任意选取）
    var pivot = arr.splice(pivotIndex, 1)[0];  //基准数
    var left = [];
    var right = [];
    for (var i = 0; i < arr.length; i++){
        if (arr[i] < pivot) {
            left.push(arr[i]);
        } else {
            right.push(arr[i]);
        }
    }
    return quickSort(left).concat([pivot], quickSort(right));  //链接左数组、基准数构成的数组、右数组
};
```

>使用arr.splice是为了取出元素(返回删除值)
>concat只能链接数组




### 希尔排序
```
function selectionSort(arr) {
    var len = arr.length;
    var minIndex, temp;
    for (var i = 0; i < len - 1; i++) {
        minIndex = i;
        for (var j = i + 1; j < len; j++) {
            if (arr[j] < arr[minIndex]) {     // 寻找最小的数
                minIndex = j;                 // 将最小数的索引保存
            }
        }
        temp = arr[i];
        arr[i] = arr[minIndex];
        arr[minIndex] = temp;
    }
    return arr;
}
```




## 三面/四面
* 业务能力
* 团队协作能力
* 事务推动能力
* 带人能力
* 其他能力

### 业务能力
* 做过什么业务？
* 负责的业务有什么业绩？
* 使用了什么技术方案？
* 突破了什么技术难点？
* 遇到了什么问题？
* 最大收获是什么？

## 终面(hr面)

* 乐观积极
* 主动沟通
* 逻辑顺畅
* 上进有责任心
* 有主张，做事果断

### 话题

1. 职业竞争力
2. 职业规划



#### 职业竞争力
为什么这个岗位要给你？
1. 业务能力
2. 思考能力(对一件事可以从不同的角度去思考，找到最优解)
3. 学习能力(不断学习新的业务和技术，沉淀，总结)
4. 无上限的付出(对于无法解决的问题可以加班)

#### 职业规划
1. 目标是什么(在业务上成为专家，在技术上成为大牛)
2. 近阶段的目标(不断的学习积累各方面的经验，以学习为主)
3. 长期目标(做几件很有价值的事情，如开源作品，技术框架)
4. 方式方法(先完成业务上的主要问题，做到极致，然后逐步向目标靠拢)


>适当赞美hr，希望多得到公司的资源，定期举办分享会...







## 面试紧张





首先，我们为什么紧张，最原始最根本的一个原因，是来自于我们对未知的恐惧，在面试上的这种未知，最大的是你不知道你会不会通过，细分的点是你不知道面试官是个怎样的人，你不知道他会问你什么问题，你不知道你的回答会不会让他喜欢，你不知道他会不会针对你的回答问出可能更难回答的问题



* 基本大家都会紧张。

* 列出所有可能让你紧张的压力场景。

* 全部提前预演一遍。  
* 准备充分，有备而来
* 心理暗示

* 逐个排除风险点。
* 抓住每一次面试机会，锻炼自己的临场发挥能力





## 面试注意点



- 1、**回答问题不要过于着急，一定要耐心等待面试官把问题说完**
- 2、**回答问题要有逻辑、干练简洁**
- 3、**如果面试官打断你说话，此时一定要谨慎回答，因为很有可能你回答过于繁琐且他对你当下的回答不满意**



----



 **把面试当作一场交流，而不是一场考试**



心理上的，要意识到这是个双向考察的机会。一般面试的时候，求职者出于略弱势的地位，这时更要提醒自己，这个机会未必是适合自己的。有时候强扭的瓜不甜。这是本人亲身体会。所以，不要对这个机会过于执着，战略上藐视。



-----



**每场面试后的分析也至关重要**

而是要**对每一次面试进行全过程的复盘反思**，到底自己为什么在紧张，太过重视这个机会？**会在实战中审视自身得失**，每次提高一点点，就已经很棒啦。









### 准备简历



反例：

**罗列大量技术工具**。  **工具：Ruby，Java，jQuery，React，Git，Jira等**

提升：

给我们的项目体检一系列的移动客户端的API，如来记录各个国家地区的爆米花热狗的价格。通过etags实现缓存，来减少移动设备在消费 API时 60%的API响应时间。领导团队升级到 Rails5。在此之前，实施和验证几个 Rails4 的安全补丁。

------





反例：**『优秀的沟通技巧』**

在简历上仅仅写出『拥有优秀的沟通技巧』恰恰体现了你不咋地的沟通能力。



**提升：**

主导和对齐一个正在进展中的平台优化的例会（用来定期偿还我们之前留下的技术债）。我给例会中引入了一套代码准则来避免直接指责同事和确保所有团队成员都能有机会说出和提议对目前技术债的解决方案。



----



反例：

**模糊不清的导师工作**

**提升：**

每周会花费5个小时左右去指导我手下计算机科学的本科实习生加速相关最佳实践在他最后一个学期里。最终让他在毕业后能够以全职正式员工身份入职。







##  怎么看待分享和写技术博客



 我觉得分享更像是一种工具一种方法，帮你回过头来梳理你最近做的事情，沉淀的东西，分享和写文章，往往作者和分享人本身受益是最大的，听者能吸收进去 30% 你的分享就已经算很成功了。 





## 总结

JD描述(job description)
对于社招一定要看，对于校招可以忽略

简历
对照JD改写出相吻的简历，对于未掌握的技术栈快速复习理解。

自我介绍
一定要打草稿，展示什么优势，描述什么项目，切忌临场发挥



**不要一味低头做事，多思考，学会沟通。**














[1]: https://user-images.githubusercontent.com/17233651/41773411-91e22044-764e-11e8-8ad4-9066db87166f.png
[2]: https://user-images.githubusercontent.com/17233651/41775365-36a0b0da-7656-11e8-8495-bd58f7ab0bf2.png
[3]: https://user-images.githubusercontent.com/17233651/41775919-6a41ae42-7658-11e8-8e54-43ad05c12d43.png
[4]: https://pic4.zhimg.com/80/v2-0a9ca8952c83141250a2d9002e6d2047_hd.jpg
[5]: https://pic4.zhimg.com/80/v2-5b8d6e8b2b507352900c1ece00018855_hd.jpg
[6]: https://pic1.zhimg.com/80/v2-371eb702274af831df909b2c55d6a14b_hd.jpg
[7]: https://pic2.zhimg.com/80/v2-cc8365db5c9cc5ca003ce9afe88592e7_hd.jpg
[8]: https://pic2.zhimg.com/80/v2-5ebd48f09fac875f0bd25823c76ba7fa_hd.jpg
[9]: http://ww1.sinaimg.cn/large/0060lm7Tly1fjuz4jz285j30s90lmgo7.jpg
[10]: https://user-images.githubusercontent.com/17233651/42496289-1c6d668a-8458-11e8-98b3-65db50f64d48.png
[11]: http://www.ruanyifeng.com/blogimg/asset/2014/bg2014100801.jpg
[12]: http://www.ruanyifeng.com/blogimg/asset/2014/bg2014100802.png
[13]: https://images2017.cnblogs.com/blog/621603/201709/621603-20170925143850526-746597755.png
[14]: https://images2017.cnblogs.com/blog/621603/201709/621603-20170925154122198-1817891039.png
[15]: https://images2017.cnblogs.com/blog/621603/201709/621603-20170925155532276-1195130673.png
[16]: https://images2017.cnblogs.com/blog/621603/201709/621603-20170925160222510-1108792969.png
[17]: https://images2017.cnblogs.com/blog/621603/201709/621603-20170925162600417-90375901.png
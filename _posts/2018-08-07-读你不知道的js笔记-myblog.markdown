---
layout:     post
title:      "读你不知道的js笔记"
date:       2018-08-07 17:00:00
author:     "Qz"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - Other
---

> “Yeah It's on. ”


## 正文


### 数字

JavaScript 只有一种数值类型：number （数字），包括“整数”和带小数的十进制数。此处“整数”之所以加引号是因为和其他语 言不同，JavaScript 没有真正意义上的整数，这也是它一直以来为人诟病的地方。这种情况在将来或许会有所改观，但目前只有数字类型。


JavaScript 中的“整数”就是没有小数的十进制数。所以 42.0 即等同于“整数”42 。


>与大部分现代编程语言（包括几乎所有的脚本语言）一样，JavaScript 中的数字类型是基于 IEEE 754 标准来实现的，该标准通 常也被称为“浮点数”。JavaScript 使用的是“双精度”格式（即 64 位二进制）。


#### toFixed返回值是字符串

```javascript
var a = 42.59;
a.toFixed( 0 ); // "43" 
a.toFixed( 1 ); // "42.6"
a.toFixed( 2 ); // "42.59" 
```


----------


对于` . `运算符需要给予特别注意，因为它是一个有效的数字字 符，会被优先识别为数字常量的一部分，然后才是对象属性访问运算符。


```javascript
// 无效语法： 42.toFixed( 3 );    // SyntaxError


// 下面的语法都有效：
(42).toFixed( 3 );  // "42.000"
0.42.toFixed( 3 );  // "0.420"
42..toFixed( 3 );   // "42.000"
```




42.tofixed(3) 是无效语法，因为 . 被视为常量 42. 的一部分（如前所述），所以没有 . 属性访问运算符来调用 tofixed 方法。




#### 0.1 + 0.2 === 0.3  false

二进制浮点数最大的问题（不仅 JavaScript，所有遵循 IEEE 754 规范的语言都是如此



#### 整数检测 
要检测一个值是否是整数，可以使用 ES6 中的 Number.isInteger(..) 方法

```javascript
Number.isInteger( 42 );     // true 
Number.isInteger( 42.000 ); // true 
Number.isInteger( 42.3 );   // false
```

也可以为 ES6 之前的版本 polyfill Number.isInteger(..) 方法

```javascript
if (!Number.isInteger) {   
    Number.isInteger = function(num) {   
         return typeof num == "number" && num % 1 == 0;  
    };
}
```
### new String
原生函数可以被当作构造函数来使用，但其构造出来的对象可能会和我们设想的有所出入

```javascript
var a = new String( "abc" );
typeof a;                            // 是"object"，不是"String"
a instanceof String;                 // true
Object.prototype.toString.call( a ); // "[object String]"
```

**new String("abc") 创建的是字符串 "abc" 的封装对象，而非基本类型值 "abc"** 



可以这样来查看封装对象：
```javascript
console.log( a );
```

由于不同浏览器在开发控制台中显示对象的方式不同（对象序列化 , object serialization），所以上面的输出结果也不尽相同


　在本书写作期间，Chrome 的最新版本是这 样显示的：String {0: "a", 1: "b", 2: "c", length: 3, [[PrimitiveValue]]: "abc"} ， 而老版本这样显示：String {0: "a", 1: "b", 2: "c"} 。
　
　
　
### 内部属性 [[ Class ]]


所有 typeof 返回值为 "object" 的对象（如数组）都包含一个内部属性 [[Class]] （我们可以把它看作一个内部的分 类，而非传统的面向对象意义上的类）。这个属性无法直接访问，一般通过 Object.prototype.toString(..) 来查 看。例如：

```javascript
Object.prototype.toString.call( [1,2,3] ); // "[object Array]"

Object.prototype.toString.call( /regex-literal/i ); // "[object RegExp]"
```


### 封装对象释疑 

使用封装对象时有些地方需要特别注意。

比如 Boolean ：

```javascript
var a = new Boolean( false );
if (!a) { 
    console.log( "Oops" ); // 执行不到这里 
}
```

我们为 false 创建了一个封装对象，然而该对象是真值（“truthy”，即总是返回 true ），所以这里使用封装对 象得到的结果和使用 false 截然相反



### JSON 字符串化 
对大多数简单值来说，JSON 字符串化和 toString() 的效果基本相同，只不过序列化的结果总是字符串：

```javascript
JSON.stringify( 42 );   // "42" 
JSON.stringify( "42" ); // ""42"" （含有双引号的字符串） JSON.stringify( null ); // "null"
JSON.stringify( true ); // "true"
```


不安全的JSON值undefined 、function 、symbol （ES6+）和包含循环引用（对 象之间相互引用，形成一个无限循环）的对象都不符合 JSON 结构标准，支持 JSON 的语言无法处理它们。


JSON.stringify(..) 在对象中**遇到 undefined 、function 和 symbol 时会自动将其忽略**，在数组中则会返回 null （以保证单元位置不变）。

```javascript
JSON.stringify( undefined );      // undefined JSON.stringify( function(){} );   // undefined
JSON.stringify( 
    [1,undefined,function(){},4] 
);                           // "[1,null,null,4]" JSON.stringify( 
    { a:2, b:function(){} }
);                           // "{"a":2}"
```



**对包含循环引用的对象执行 JSON.stringify(..) 会出错**





### `<script>`
通常可以在网页中使用`<scriopt src=..></script>` 来加载 这些文件，或者使用 `<script> .. </script>` 来包含内联代码（inline-code）。


这些文件和内联代码是相互独立的 JavaScript 程序还是一个整体呢？

答案（也许会令人惊讶）是它们的运行方式更像是相互独立的 JavaScript 程序，但是并非总是如此

它们共享 global 对象（在浏览器中则是 window ），也就是说这些文件中的代码在共享的命名空间中运行，并相互交互。


如果某个 script 中定义了函数 foo() ，后面的 script 代码就可以访问并调用 foo() ，就像 foo() 在其内部被声明过一样


但是全局变量作用域的提升机制在这些边界中不适 用，因此无论是 `<script> .. </script>` 还是 `<script src=..></script>` ，下面的代码都无法运行（因为 foo() 还未被声明）。

```
//无法运行
<script>foo();</script>
<script>  function foo() { .. } </script>
```


但是下面的两段代码则没问题：
```
<script>  foo();  function foo() { .. } </script>
```

和:

```
<script>  function foo() { .. } </script>
<script>foo();</script>
```


如果 script 中的代码（无论是内联代码还是外部代码）发生错误，它会像独立的 JavaScript 程序那样停止，但是后续的 script 中的代码（仍然共享 global ）依然会接着运行，不会受影响。

你可以使用代码来动态创建 script ，将其加入到页面的 DOM 中，效果是一样的






### 执行上下文的生命周期


个执行上下文的生命周期可以分为两个阶段。

1. 创建阶段
在这个阶段中，执行上下文会分别创建变量对象，建立作用域链，以及确定this的指向。

2. 代码执行阶段
创建完成之后，就会开始执行代码，这个时候，会完成变量赋值，函数引用，以及执行其他代码。



### 数组中索引强制转换

在数组中，如果字符串键值能够被强制类型转换为十进制数字的话，它就会被当作数字索引来处理。

```javascript
var a = [ ];
a["13"] = 42;
a.length; // 14
```



### 字符串不可变
JavaScript 中字符串是不可变的，而数组是可变的

```javascript
  var a = "foo"
  var b = ["f", "o", "o"]
  a[1] = 'x'
  b[1] = 'x'
  console.log(a) // "foo"
  console.log(b) //["f", "x", "o"]
```

且 a[1] 在 JavaScript 中并非总是合法语法，正确的方法应该是a.chartAt(1)



### toPrecision()获取有效位数



```javascript
var a = 42.59;
a.toPrecision( 1 ); // "4e+1" 
a.toPrecision( 2 ); // "43" 
a.toPrecision( 3 ); // "42.6" 
a.toPrecision( 4 ); // "42.59"
a.toPrecision( 5 ); // "42.590" 
a.toPrecision( 6 ); // "42.5900"
```


上面的方法不仅适用于数字变量，也适用于数字常量。不过对于 . 运算符需要给予特别注意，因为它是一个有效的数字字 符，会被优先识别为数字常量的一部分，然后才是对象属性访问运算符。




```javascript
// 无效语法： 42.toFixed( 3 );    // SyntaxError


// 下面的语法都有效：
(42).toFixed( 3 );  // "42.000" 
0.42.toFixed( 3 );  // "0.420"
42..toFixed( 3 );   // "42.000
```


42.tofixed(3) 是无效语法，因为 . 被视为常量 42. 的一部分（如前所述），所以没有 . 属性访问运算符来调用 tofixed 方法



42..tofixed(3) 则没有问题，因为第一个 . 被视为 number 的一部分，第二个 . 是属性访问运算符。只是这样看着奇 怪，实际情况中也很少见。在基本类型值上直接调用的方法并不多见，不过这并不代表不好 不好 或不对 不对 。


### undefined 和 null 


undefined 类型只有一个值，即 undefined 。null 类型也只有一个值，即 null 。它们的名称既是类型也是值。


* null 指空值（empty value）
* undefined 指没有值（missing value）






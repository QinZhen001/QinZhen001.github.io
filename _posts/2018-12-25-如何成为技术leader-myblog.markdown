---
layout:     post
title:      "如何成为技术leader"
date:       2018-12-25 14:09:00
author:     "Qz"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - 生活
---

> “Yeah It's on. ”


## 正文
[网页链接](http://blog.sina.com.cn/s/blog_8f9ccaaf0102wdku.html)




[面试招聘：2 年招到 18 个前端教你怎么招人](https://juejin.im/post/5d6f54e9f265da03f66ddf65?utm_source=gold_browser_extension)


[if 我是前端Leader，怎么走出小微前端团队的围墙](https://juejin.im/post/5dd55512f265da47a807cc06)




**抛开薪资待遇的部分，作为一个团队的管理者，天然都对员工的成长负责**



>在你的团队里，不论男女、不论层级、不论能力，只要在你的麾下，你就要对他的成长天然负责，妄图逃避规避找理由，都是不敢正视自己管理职责的闪烁其词，没有这样成就他人的心态，你可能仅仅做到了管理及格。



-------------------


用人单位不是冰冷的一个组织，而是围在一起做事的一群人，既然是一群人，就自然有这群人凝聚出来的性格，这个性格决定了他们喜欢什么样的人，愿意接纳什么样的人，愿意培养什么样的人以及会淘汰什么样的人，比如不合群的人容易被淘汰，因为他容易与团队之间产生对立甚至内耗，降低团队的战斗力，这是站在用人单位的视角评估潜在的合作成本和磨合成本，以及可能的破坏力。




## 小微/外包企业的前端


**大厂谈高大上技术、谈架构，谈场景。小微企业前端谈温饱**


### 困境

大厂谈高大上技术、谈架构，谈场景。小微企业前端谈温饱，我们或多或少面临这些困境:


**边缘化**


在这类公司，前端没什么话语权，他们只是一个简单页面实现，简称切图仔。

本质上是业务决定了前端的工作不会占用太大比重，自然也不会受到太多重视, 可取代性也很高。这类公司往往是传统行业，例如硬件、电力。相反依赖于端行业，如电商、社交，前端的地位会高很多。


这种环境下，前端不会关心太多业务，当然容易被边缘化，扮演相声里面的捧哏角色。





**协助混乱/基础设施薄弱**

小微企业，因为人员整体水平不高，协作通常也比较混乱、不规范。这里指的是一个项目的整体研发协作。



对于前端来说，我们的上游可能是后端，后端的代码质量和规范性对前端影响也会特别大。 例如接口混乱、文档不规范、未考虑应用场景、接口不测试等等... 这种工作环境下，效率会非常低，前端开发会非常痛苦。



**基础设施弱，前端工程化总感觉束手束脚。**



**忙碌**


感觉每天都很忙碌，却像什么事情都没有做。每天的工作重复一次又一次，原地踏步。




**孤岛**

像置身孤岛，知识和消息是封闭的，个人能力和技术很难有大的突破。公司的格局决定个人的格局。

**人员变动**

吸引不了优秀的人才，而且优秀人才也留不住，整体水平较低，很难有技术沉淀和开拓。

**理想/企业文化的认同感**

我们只是为了赚钱，别跟我谈什么理想。我们感觉自己在被压榨，是机器，这样的工作自然不会有什么幸福感。


----


### 极简的技术栈

**Keep it Simple, Keep it Stupid。**


最近对这个原则体会颇深。小微团队技术选型不应该随大流、追随最新最热的技术，**而是应该选择符合自己的团队水平和业务情况的极简技术栈**。


这四个原则非常重要：

* 简单
* 自动化
* 清晰健全的文档
* 约束


‘简单’主要是为了减低学习的门槛、降低心智的负担, 接口越简洁越好：

* 约定 > 配置
* 显式 > 隐式
* 声明式 > 命令式
* 接口协议: JSONRPC > Restful
* 构建工具: Parcel > Webpack, 除此之外还有Vue-cli, create-react-app
* 框架：随便举个例子 Vue > React。Vue 入门会‘相对’简单，React 太灵活、社区百花齐放、尽管我很爱它，但是它没办法阻止别人干蠢事。
* 状态管理: Mobx > Redux > Rxjs。

当然, 具体场景具体分析


----

‘自动化’，能够自动化解决的事情，就不要靠文档规范、靠口头沟通:

ESlint、Styleint、HTMLlint、Markdownlint... *Lint。有各种各样的 lint 工具和社区推荐规范，自动检测各个环节是否符合规范。
Prettier 代码格式化。只有一种代码样式，别BB


-----

'文档'，重要性不言而喻。有事先看文档，再问别人


-----

'约束'，在事情失去控制时，我能体会到那种绝望。这时候你会希望当初有更多的约束，尽量让代码保持在可控范围之内。例如 Typescript，各种 *Lint。如果没有约束机制，规范永远只是规范。



### 避免单点故障


小微前端团队，人员资源非常有限，往往每个人负责不同的项目，这就可能出现‘单点故障’。假如这时候项目的负责人请假或者离职，就会让人措手不及。一方面项目交接过程会拉长，另一方面其他成员上下文切换的成本也很高。**我们尤其害怕接手的项目是一个烂摊子。**



解决单点故障的唯一办法是让更多的成员交叉参与不同的项目，项目的责任在于团队而不在于个人。**另外可以配合例如代码 Review 这些手段，多种途径让团队成员可以熟悉项目的代码。**


代码规范和共享代码在这里也可以起到很大的作用。如果'知识'可以在多个项目中复用和共享，那么项目上下文切换的成本就相对比较低。


### 集体利益大于个人利益

不管是大公司还是小公司，集体的利益永远是大于个人利益的。


* 集体利益大于个人利益。这是我们从小被灌输的思想，在一个集体中，你的行为和决策是需要对集体负责的。
* 对项目缺乏整体的把控，没有充分的风险评估。尽管前端只是一个完整项目的一环，作为前端团队Leader, 还是需要从整体上了解项目的进度。你要知道项目的开始时间、截止时间、提测时间、开发/测试进度、当前资源情况等。通过这些信息来进行制定资源的分配计划和风险预估。
* 推动协作效率的改进。作为团队 Leader，就不能只单纯关注技术和代码。我们需要去关注团队之间的协作通道，提高团队层面的协作效率，为团队成员扫除沟通方面的障碍。


**问题不可怕，可怕的是不知道问题在哪里，你要想进步、就要多反思、多问为什么...**


### 总结

**小微企业的围墙不能靠一个人就能推倒，业务的扩张和升级才是真正的动力。**


**如果你觉得你公司有上升的动力和势态，而且你认同公司的价值观，不妨一起努力推动公司的进步。反之，要认真考虑自身的发展。**







## 补充


升级的过程就是在不断解决问题，解决问题的同时我会发现有很多问题是过去管理上没有覆盖导致出现的问题，就是在过去管理过程中没有**面向未来**去搭建团队。我的视野需要往更前去看，把目前团队的「点状问题」变成「层面问题」。






### 人事管理



人事管理是重要的管理技能之一。许多人只会管理不如自己聪明的人或是能力不如自己的人，比如下属。许多中层管理人员一直停留在中层，就是因为他们只知道如何与职位低于自己的人一起工作，却不善于和比自己职位高的人一起工作。真正的技能是在某些技术领域能够管理比你更聪明的人并给他们提供优厚的报酬。








### 引导新人




引导新人的时候，要具备一秒变小白的素质。很多问题，作为老鸟，一眼就知道大体思路了。但是，新人缺乏长期历练形成的隐形技能。往往不得要领。这个时候，就得耐着性子，暂时忘掉自己的方案，沿着新人的思路，用自己的经验去判断，指出那些他们没想到的陷阱或泥潭。他们自己会更主动打磨自己的观点想法。所谓教学相长，其实经过这样一番探讨，自己也能更深入理解习以为常的概念。



### Bug引发事故，该不该追究责任


第一，追究责任，但不是惩罚。“知其然，并知其所以然”，搞清楚在什么场景下，什么样的 Bug引发了什么样的错误。相关人员应该尽最大的可能去做好善后工作，并思考如何避免下次犯同样的错误。


第二，对事儿不对人。在这个追究的过程中，重点在于怎么改善流程、改进制度，来避免同样的错误，而不是指责员工不应该怎么样。如果相关人员已经那么做了，为什么这个错误仍然没有及时被发现和制止？

第三，反复问“为什么”，从根本上发现问题。错误为什么会发生？有些 Bug 可能只是显露出来的冰山一角。


第四，员工关系的建立也很关键。我们需要培养的是大家相互信任、互帮互助，为了共同的目标努力的氛围，而不是一种不安全感。这种不安全感可能是自己不够自信，害怕犯错；也可能是对他人漫不关心，或是对其代码质量有怀疑。只有大家都相信，找出问题的根本目的是解决问题，避免问题再发生，才能建立一个不断反思、不断学习、不断进步的良性循
环。



### A/B 测试



第一点：永远不要过分相信你的直觉。 有时候，我们会觉得一个功能特征的改动是理所当然的，更新后效果肯定更好，做什么 A/B 测试，这显然是画蛇添足。





第二点：实验样本的数量和分配很重要。 如果你的实验注定没有太多数据，也许就不要去做 A/B 测试了，小样本偏差会很大，帮不了太多的忙，除非你的测试结果出现“一边倒”的情
况。



第三点：分析的维度尽可能全面。 文章开头举的例子是说，虽然你最在乎的是用户转化率，但是功能改动可能会影响很多指标，这些指标都要尽可能地测量和分析。



第四点：其它组的改动对 A/B 测试产生的影响。 当 A/B 测试成为一个广泛使用的工具后，产品很多特性的改动都会用到这个工具。这也就意味着，当你在采集数据做分析的时候，别人也在做同样的事，只不过策略和数据样本不同。



第五点：比较值的趋势必须是收敛的，而不是发散的。 要想比较结果有实际的统计意义，一定是每天采集数据的比较结果逐步收敛，最终趋于稳定。如果一周内 A 比较好，后面又开始波动，B 变得更好，这样来回波动的结果是没有太大参考价值的。






第六点：数据埋点。 数据的埋点和采集是 A/B 测试成功的关键。




第七点：形成一个流程，或者设计一个工具。 这一点很重要。A/B 测试作为一个工具，只有在它足够灵活、好用的情况下，才能更广泛地应用到日常的产品迭代和开发中。虽然说这个方法很简单，但是做好一套包括埋点、采集、处理和具备 UI 的工具，会让工程师事半功倍



第八点：试图给每个结果一个合理的解释。 不用过分相信数据，也不要拿到什么分析结果都照单全收。试着去给每个结果一个合理的解释，不要觉得结果比期望值还好，就不用思考为什么结果如此完美。这可能并不是一件好事情，实际情况是：如果解释不了，可能它就是个 Bug。















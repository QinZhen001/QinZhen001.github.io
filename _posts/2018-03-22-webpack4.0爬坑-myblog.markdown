---
layout:     post
title:      "webpack4.0爬坑"
date:       2018-03-22 15:04:00
author:     "Qz"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - Webpack
---

> “webpack4.0爬坑记录 Orz”


## 正文

### extract-text-webpack-plugin
```
(node:9624) DeprecationWarning: Tapable.plugin is deprecated. Use new API on `.hooks` instead

(node:9624) DeprecationWarning: Tapable.apply is deprecated. Call apply on the plugin directly instead

C:\Users\zsl08.000\Desktop\Vue-Webpack-todo\node_modules\webpack\lib\Chunk.js:460

                throw new Error(

                ^



Error: Chunk.entrypoints: Use Chunks.groupsIterable and filter by instanceof Entrypoint instead
```

可以换成mini-css-extract-plugin

[https://www.npmjs.com/package/mini-css-extract-plugin](https://www.npmjs.com/package/mini-css-extract-plugin)


This plugin extract CSS into separate files. It creates a CSS file per JS file which contains CSS. It supports On-Demand-Loading of CSS and SourceMaps.

It builds on top of a new webpack v4 feature (module types) and requires webpack 4 to work.


Compared to the extract-text-webpack-plugin:
* Async loading
* No duplicate compilation (performance)
* Easier to use
* Specific to CSS



### webpack中css独立成文件后图片路径错误

[https://blog.csdn.net/logan_LG/article/details/82107390](https://blog.csdn.net/logan_LG/article/details/82107390)


使用webpack构建项目时将css文件独立出来是常见的做法，在webpack4.0以前是使用extract-text-webpack-plugin，

webpack4.0以后使用mini-css-extract-plugin，这里要讲的是后者


经过url-loader处理后的图片是导出到了 dist/img/ 目录下




可以看到url是img/webpack.xxx.jpg，而正确的路径应该是 ../img/webpack.xxx.jpg


如果直接把css文件直接放在dist根目录下是没有问题的，但是按照习惯，我们一般会把css文件单独放到一个css文件夹下。



那么我们怎么解决这个问题呢？



在此之前我们先看看网上见得最多的解决方案，也就是在output的配置中加入一个 publicPath: '../' 配置，





**css中的url路径的确可以了，但是可以看到，控制台出现了更多报错，并且css文件本身也不能正确引入了，因此这种方案在这种情况下是解决不了问题的**。




**由于output中的publicPatch配置会在所有用相对路径引用资源的地方都将上一个 ‘../’因此导致其他原本正确的路径也错了。**



因此正确的解决方案应该是在引入MiniCssExtractPlugin.loader时使用对象方式，并在options目录下添加 publicPath: '../' 配置，这样就只会在css文件中引入的资源中添加 “../”，就不会影响其他文件中的路径了。



```javascript
  module: {
        rules: [
            {
                test: /\.(sa|sc|c)ss$/,
                use: [
                    devMode?'style-loader':{
                        loader:MiniCssExtractPlugin.loader,
                        options: {
                            publicPath: '../'
                        }
                    },
                    'css-loader',
                    //'postcss-loader',
                    //'sass-loader'
                ]
            },
        ]
    },
```





### uglifyjs-webpack-plugin
更新 uglifyjs-webpack-plugin 至 v1 版本，以支持 ES2015



### mode 
[https://segmentfault.com/a/1190000013712229?utm_source=tag-newest](https://segmentfault.com/a/1190000013712229?utm_source=tag-newest)

现在可以在两种模式中选择 (mode or --mode) : 生产模式或开发模式

一旦开启了 --mode production，会自动开启代码压缩、scope hoist 等插件，以及自动传递环境变量给 lib 包，所以已经不需要 plugins 这个配置项了。

同理，开启了 --mode development 会自动开启 sourceMap 等开发插件，我们只要关心更简单的配置，这就是 4.0 零配置的重要改变。

```javascript
//parent chunk中解决了的chunk会被删除
optimization.removeAvailableModules:true
//删除空的chunks
optimization.removeEmptyChunks:true
//合并重复的chunk
optimization.mergeDuplicateChunks:true
````

**在 develoment mode 默认**

```javascript
//调试
devtool:eval
//缓存模块, 避免在未更改时重建它们。
cache:true
//缓存已解决的依赖项, 避免重新解析它们。
module.unsafeCache:true
//在 bundle 中引入「所包含模块信息」的相关注释
output.pathinfo:true
//在可能的情况下确定每个模块的导出,被用于其他优化或代码生成。
optimization.providedExports:true
//找到chunk中共享的模块,取出来生成单独的chunk
optimization.splitChunks:true
//为 webpack 运行时代码创建单独的chunk
optimization.runtimeChunk:true
//编译错误时不写入到输出
optimization.noEmitOnErrors:true
//给模块有意义的名称代替ids
optimization.namedModules:true
//给模chunk有意义的名称代替ids
optimization.namedChunks:true
```

**在 production mode 默认**

```javascript
//性能相关配置
performance:{hints:"error"....}
//某些chunk的子chunk已一种方式被确定和标记,这些子chunks在加载更大的块时不必加载
optimization.flagIncludedChunks:true
//给经常使用的ids更短的值
optimization.occurrenceOrder:true
//确定每个模块下被使用的导出
optimization.usedExports:true
//识别package.json or rules sideEffects 标志
optimization.sideEffects:true
//尝试查找模块图中可以安全连接到单个模块中的段。- -
optimization.concatenateModules:true
//使用uglify-js压缩代码
optimization.minimize:true
```




### 配置
* NoEmitOnErrorsPlugin -> optimization.noEmitOnErrors (生产模式下默认开启)
* ModuleConcatenationPlugin -> optimization.concatenateModules (开发模式下默认开启)
* NamedModulesPlugin -> optimization.namedModules (开发模式下默认开启)
* CommonsChunkPlugin 已被移除 -> optimization.splitChunks, optimization.runtimeChunk

NoEmitOnErrorsPlugin(现已弃用)
在编译出现错误时，使用 NoEmitOnErrorsPlugin 来跳过输出阶段。这样可以确保输出资源不会包含错误。对于所有资源，统计资料(stat)的 emitted 标识都是 false。



### 使用splitChunks
[https://mp.weixin.qq.com/s/oOHDsuGnkPXnJNTNXQ0Zqw](https://mp.weixin.qq.com/s/oOHDsuGnkPXnJNTNXQ0Zqw)



在webpack.config.js中的module.exports加入
```javascript
    optimization: {
        splitChunks: {
            chunks: "initial",         // 必须三选一： "initial" | "all"(默认就是all) | "async"
            minSize: 0,                // 最小尺寸，默认0
            minChunks: 1,              // 最小 chunk ，默认1
            maxAsyncRequests: 1,       // 最大异步请求数， 默认1
            maxInitialRequests: 1,    // 最大初始化请求书，默认1
            name: () => {
            },              // 名称，此选项课接收 function
            cacheGroups: {                 // 这里开始设置缓存的 chunks
                priority: "0",                // 缓存组优先级 false | object |
                vendor: {                   // key 为entry中定义的 入口名称
                    chunks: "initial",        // 必须三选一： "initial" | "all" | "async"(默认就是异步)
                    test: /react|lodash/,     // 正则规则验证，如果符合就提取 chunk
                    name: "vendor",           // 要缓存的 分隔出来的 chunk 名称
                    minSize: 0,
                    minChunks: 1,
                    enforce: true,
                    maxAsyncRequests: 1,       // 最大异步请求数， 默认1
                    maxInitialRequests: 1,    // 最大初始化请求书，默认1
                    reuseExistingChunk: true   // 可设置是否重用该chunk（查看源码没有发现默认值）
                }
            }
        }
    }
```

CommonChunksPlugin 会找到多数模块中都共有的东西，并且把它提取出来（common.js），也就意味着如果你加载了 common.js，那么里面可能会存在一些当前模块不需要的东西。


而 SplitChunksPlugin 采用了完全不同的 heuristics 方法，它会根据模块之间的依赖关系，自动打包出很多很多（而不是单个）通用模块，可以保证加载进来的代码一定是会被依赖到的。

下面是一个简单的例子，假设我们有 4 个 chunk，分别依赖了以下模块：



| chunk   | 依赖模块                            |
| ------- | ----------------------------------- |
| chunk-a | react, react-dom, componentA, utils |
| chunk-b | react, react-dom, componentB, utils |
| chunk-c | angular, componentC, utils          |
| chunk-d | angular, componentD, utils          |


如果是以前的 CommonChunksPlugin，那么默认配置会把它们打包成下面这样：




| common  | utils                        |
| ------- | ---------------------------- |
| chunk-a | react, react-dom, componentA |
| chunk-b | react, react-dom, componentB |
| chunk-c | angular, componentC          |
| chunk-d | angular, componentD          |


显然在这里，react、react-dom、angular 这些公用的模块没有被抽出成为独立的包，存在进一步优化的空间。


现在，新的 SplitChunksPlugin 会把它们打包成以下几个包：


| 包名                            | 包含的模块       |
| ------------------------------- | ---------------- |
| `chunk-a~chunk-b~chunk-c~chunk-d` | utils            |
| chunk-a~chunk-b                 | react, react-dom |
| chunk-c~chunk-d                 | angular          |
| chunk-a                         | componentA       |
| chunk-b                         | componentB       |
| chunk-c                         | componentC       |
| chunk-d                         | componentD       |



这就保证了所有公用的模块，都会被抽出成为独立的包，几乎完全避免了多页应用中，重复加载相同模块的问题。


**虽然 webpack 4.0 提供的 SplitChunksPlugin 非常好用，但截止到写这篇文章的时候（2018年5月），依然存在一个坑，那就是 html-webpack-plugin 还不完全支持 SplitChunksPlugin，生成的公用模块包还无法自动注入到 html 中。**


### 全新的插件系统
Webpack 4配备了全新整改的插件系统。这是一个全新的API，这些插件和hooks的API有以下的配置：

* hooks对象将所有钩子作为可扩展类的属性
* 多种Hook类现在会根据hook类型存在：sync, async, normal, bailing, waterfall, looping.
* 在添加插件的时候，你需要提供一个名字
* 在添加插件的时候，你可以选择插件的类型(sync/callback/promise)
* this.hooks = { myHook: new SyncHook(…) } 是注册钩子的新方法。创建一个新的Hook对象，作为hooks对象的属性

















## 补充


### cross-env
cross-env能跨平台地设置及使用环境变量

大多数情况下，在windows平台下使用类似于: NODE_ENV=production的命令行指令会卡住，windows平台与POSIX在使用命令行时有许多区别（例如在POSIX，使用$ENV_VAR,在windows，使用%ENV_VAR%。。。）

cross-env让这一切变得简单，不同平台使用唯一指令，无需担心跨平台问题

npm安装方式
`npm i --save-dev cross-env`

在npm脚本(多是package.json)里这么配置
```
{
  "scripts": {
    "build": "cross-env NODE_ENV=production webpack --config build/webpack.config.js"
  }
}
```
运行npm run build，这样NODE_ENV便设置成功，无需担心跨平台问题

**cross-env不起作用**



package.json里面scripts语句如下
"test": "cross-env NODE_ENV=dev && node test.js"
test.js 只有一句 console.log(process.env.NODE_ENV)
但结果显示undefined
为什么？



NODE_ENV脚本设置无效
//脚本
//cross-env模块下
cross-env NODE_ENV = dev && node app.js

//windows下
set NODE_ENV = dev && node app.js

ross-env模块下，它划分出前后两个环境，后一句的环境没有设置到NODE_ENV变量，值为undefined；

**纠正，去掉&&
cross-env NODE_ENV = dev node app.js**

windows下，NODE_ENV被设置成 'dev '，末尾带有一个空格

纠正，去掉&&前的空格，不可以直接去掉&&
因为去掉后，这句脚本就不能正确的被切分为两句来执行了，而直接是赋dev  

**set NODE_ENV = dev&& node app.js**




### 图片地址引用错误

webpack 的别名好处大家也都了解, 但是 vue 的模板中, 对图片地址使用别名时总出现问题

```
alias: {
  'src': path.resolve(__dirname, '../src'),
  'assets': path.resolve(__dirname, '../src/assets'),
  'components': path.resolve(__dirname, '../src/components')
}
```

```
<template>
  <img src="assets/images/logo.jpg" />
</template>
<script>
import 'assets/css/style.css'
</script>
<style>
.logo {
  background: url(asset/images/bg.jpg)
}
</style>
```



上面的代码, 你会发现只有引入style.css是成功的, 图片地址和背景图片地址都会解析失败...

经过各种搜索找原因(这时候, 你会发现百度搜索这些技术型的内容, 真是垃圾中的战斗机), 最终还是找到原因了...

**vue-html-loader and css-loader translates non-root URLs to relative paths. In order to treat it like a module path, prefix it with ~**

**就是要在别名前面加一个~**


改成这样:
```
<template>
    <img src="~assets/images/logo.jpg" />
</template>
<script>
import 'assets/css/style.css'
</script>
<style>
.logo {
    background: url(~asset/images/bg.jpg)
}
</style>
```

意思就是: 告诉加载器它是一个模块，而不是相对路径


注意: 只有在template中的静态文件地址和style中的静态文件地址需要加~, 在script里的, 别名定义成什么就写什么.







### Cannot assign to read only property

```
webpack报错：Cannot assign to read only property 'exports' of object '#<Object>'
```

The code above is ok. You can mix require and export. You can‘t mix import and module.exports.

也就是说，在webpack打包的时候，可以在js文件中混用require和export。**但是不能混用import 以及module.exports。**


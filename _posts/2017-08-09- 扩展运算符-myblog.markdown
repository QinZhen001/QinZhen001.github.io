---
layout:     post
title:      "扩展运算符"
date:       2017-08-09 11:15:00
author:     "Qz"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - ES6
---

> “Yeah It's on. ”


## 正文
[网页链接](http://blog.csdn.net/qq_30100043/article/details/53391308)

#### 含义
扩展运算符（ spread ）是三个点（...）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。
```
console.log(...[1, 2, 3])  
// 1 2 3  
console.log(1, ...[2, 3, 4], 5)  
// 1 2 3 4 5  
[...document.querySelectorAll('div')]  
// [<div>, <div>, <div>]  
```
<strong>该运算符将一个数组，变为参数序列</strong>

```
function push(array, ...items) {  
array.push(...items);  
}  
function add(x, y) {  
return x + y;  
}  
var numbers = [4, 38];  
add(...numbers) // 42  
```
```
function f(v, w, x, y, z) { }  
var args = [0, 1];  
f(-1, ...args, 2, ...[3]); 
```
#### 替代数组的 apply 方法
由于扩展运算符可以展开数组，所以不再需要apply方法，将数组转为函数的参数了。
```
// ES5 的写法  
function f(x, y, z) {  
// ...  
}  
var args = [0, 1, 2];  
f.apply(null, args);  
// ES6 的写法  
function f(x, y, z) {  
// ...  
}  
var args = [0, 1, 2];  
f(...args);  
```

#### 合并数组
扩展运算符提供了数组合并的新写法。
```
// ES5  
[1, 2].concat(more)  
// ES6  
[1, 2, ...more]  
var arr1 = ['a', 'b'];  
var arr2 = ['c'];  
var arr3 = ['d', 'e'];  
// ES5 的合并数组  
arr1.concat(arr2, arr3);  
// [ 'a', 'b', 'c', 'd', 'e' ]  
// ES6 的合并数组  
[...arr1, ...arr2, ...arr3]  
// [ 'a', 'b', 'c', 'd', 'e' ]  
```
#### 与解构赋值结合
扩展运算符可以与解构赋值结合起来，用于生成数组。
```
// ES5  
a = list[0], rest = list.slice(1)  
// ES6  
[a, ...rest] = list  
下面是另外一些例子。  
const [first, ...rest] = [1, 2, 3, 4, 5];  
first // 1  
rest // [2, 3, 4, 5]  
const [first, ...rest] = [];  
first // undefined  
rest // []:  
const [first, ...rest] = ["foo"];  
first // "foo"  
rest // []  
```
如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。
const [...butLast, last] = [1, 2, 3, 4, 5];  
//  报错  
const [first, ...middle, last] = [1, 2, 3, 4, 5];  
//  报错  

#### 字符串
扩展运算符还可以将字符串转为真正的数组。
[...'hello']  
// [ "h", "e", "l", "l", "o" ]  
上面的写法，有一个重要的好处，那就是能够正确识别 32 位的 Unicode 字符。
'x\uD83D\uDE80y'.length // 4  
[...'x\uD83D\uDE80y'].length // 3  

#### 实现了 Iterator 接口的对象
任何 Iterator 接口的对象，都可以用扩展运算符转为真正的数组。
```
var nodeList = document.querySelectorAll('div');  
var array = [...nodeList];  
```
上面代码中，querySelectorAll方法返回的是一个nodeList对象。它不是数组，而是一个类似数组的对象。这时，扩展运算符可以将其转为真正的数组，原因就在于NodeList对象实现了 Iterator 接口。
对于那些没有部署 Iterator 接口的类似数组的对象，扩展运算符就无法将其转为真正的数组。

#### Map 和 Set 结构， Generator 函数
扩展运算符内部调用的是<strong>数据结构的 Iterator 接口</strong>，因此只要具有 Iterator 接口的对象，都可以使用扩展运算符，比如 Map 结构。
```
let map = new Map([  
[1, 'one'],  
[2, 'two'],  
[3, 'three'],  
]);  
let arr = [...map.keys()]; // [1, 2, 3]  
```

## 后记
<strong>如果对没有iterator接口的对象，使用扩展运算符，将会报错。</strong>

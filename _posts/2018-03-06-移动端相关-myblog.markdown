---
layout:     post
title:      "移动端相关"
date:       2018-03-06 12:54:00
author:     "Qz"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - Other
---

> “Yeah It's on. ”


# 正文



## 识别横屏

js识别

```js
window.addEventListener("resize", ()=>{
    if (window.orientation === 180 || window.orientation === 0) { 
      // 正常方向或屏幕旋转180度
        console.log('竖屏');
    };
    if (window.orientation === 90 || window.orientation === -90 ){ 
       // 屏幕顺时钟旋转90度或屏幕逆时针旋转90度
        console.log('横屏');
    }  
});

```

css识别

```css
@media screen and (orientation: portrait) {
  /*竖屏...*/
} 
@media screen and (orientation: landscape) {
  /*横屏...*/
}
```





## 针对不同dpr屏幕采用不同分辨率图片

如：在`dpr=2`的屏幕上展示两倍图`(@2x)`，在`dpr=3`的屏幕上展示三倍图`(@3x)`。

使用`media`查询判断不同的设备像素比来显示不同精度的图片：

```scss
.avatar{
            background-image: url(conardLi_1x.png);
        }
        @media only screen and (-webkit-min-device-pixel-ratio:2){
            .avatar{
                background-image: url(conardLi_2x.png);
            }
        }
        @media only screen and (-webkit-min-device-pixel-ratio:3){
            .avatar{
                background-image: url(conardLi_3x.png);
            }
        }
```

> 一般用于大图如背景图，小图标没必要用这种方式，不值得





## 端滚动属性

页面需要获取和修改页面的滚动高度，进行窗口移动的定位操作。这里有个安卓手机和 iOS 的兼容性问题。

对于 `document.documentElement.scrollTop` ，iOS 可以正常读取和设置值，安卓不可以（读到的值为 0，修改值不会真正改变窗口滚动高度）；

对于 `document.body.scrollTop` ，安卓可以正常读取和设置值，iOS 不可以；

对于 `window.scrollY` ，貌似两者都可以。



获取窗口滚动高度的兼容写法：

```js
const scrollTop = Math.max(window.scrollY, document.documentElement.scrollTop, document.body.scrollTop)
```

修改窗口滚动高度的兼容写法：

```js
document.body.scrollTop = 100 // 安卓有效
document.documentElement.scrollTop = 100 // iOS有效
```







## 触摸事件



[网页链接](https://zhuanlan.zhihu.com/p/23509912)

pc上的web页面鼠 标会产生onmousedown、onmouseup、onmouseout、onmouseover、onmousemove的事件，**但是在移动终端如 iphone、ipod Touch、ipad上的web页面触屏时会产生ontouchstart、ontouchmove、ontouchend、ontouchcancel 事件，分别对应了触屏开始、拖拽及完成触屏事件和取消。**
* 当按下手指时，触发ontouchstart；
* 当移动手指时，触发ontouchmove
* 当移走手指时，触发ontouchend。
* 当一些更高级别的事件发生的时候（如电话接入或者弹出信息）会取消当前的touch操作，即触发ontouchcancel。一般会在ontouchcancel时暂停游戏、存档等操作。

**上面的这些事件都会冒泡，也都可以取消**


>DOM 0级事件不生效：
>document.ontouchstart = function(){alert("a")}  //不起作用

触摸事件还包含下面三个用于跟踪触摸的属性。
* touches：当前屏幕上所有触摸点的列表
* targetTouches：当前对象上所有触摸点的列表
* changeTouches：涉及当前(引发)事件的触摸点的列表


1. 用一个手指接触屏幕，触发事件，此时这三个属性有相同的值。
2. 用第二个手指接触屏幕，此时，touches有两个元素，每个手指触摸点为一个值。当两个手指触摸相同元素时，
targetTouches和touches的值相同，否则targetTouches 只有一个值。changedTouches此时只有一个值，
为第二个手指的触摸点，因为第二个手指是**引发事件的原因**
3. 用两个手指同时接触屏幕，此时changedTouches有两个值，每一个手指的触摸点都有一个值
4. 手指滑动时，三个值都会发生变化
5.  一个手指离开屏幕，touches和targetTouches中对应的元素会同时移除，而changedTouches仍然会存在元素。
6. 手指都离开屏幕之后，touches和targetTouches中将不会再有值，**changedTouches还会有一个值，
此值为最后一个离开屏幕的手指的接触点。**(常常可以用于touchend事件的逻辑处理)




每个Touch对象包含的属性如下。
* clientX：触摸目标在视口中的x坐标。
* clientY：触摸目标在视口中的y坐标。
* identifier：标识触摸的唯一ID。
* **pageX：触摸目标在页面中的x坐标。**
* **pageY：触摸目标在页面中的y坐标。**
* screenX：触摸目标在屏幕中的x坐标。
* screenY：触摸目标在屏幕中的y坐标。
* target：触目的DOM节点目标。


### 触点坐标选取

touchstart和touchmove使用: e.targetTouches[0].pageX 或 (jquery)e.originalEvent.targetTouches[0].pageX

touchend使用: e.changedTouches[0].pageX 或 (jquery)e.originalEvent.changedTouches[0].pageX




### 判断手指滑动方向


```javascript
    var startx, starty;
        //获得角度
        function getAngle(angx, angy) {
            return Math.atan2(angy, angx) * 180 / Math.PI;
        };
     
        //根据起点终点返回方向 1向上 2向下 3向左 4向右 0未滑动
        function getDirection(startx, starty, endx, endy) {
            var angx = endx - startx;
            var angy = endy - starty;
            var result = 0;
     
            //如果滑动距离太短
            if (Math.abs(angx) < 2 && Math.abs(angy) < 2) {
                return result;
            }
     
            var angle = getAngle(angx, angy);
            if (angle >= -135 && angle <= -45) {
                result = 1;
            } else if (angle > 45 && angle < 135) {
                result = 2;
            } else if ((angle >= 135 && angle <= 180) || (angle >= -180 && angle < -135)) {
                result = 3;
            } else if (angle >= -45 && angle <= 45) {
                result = 4;
            }
     
            return result;
        }
        //手指接触屏幕
        document.addEventListener("touchstart", function(e) {
            startx = e.touches[0].pageX;
            starty = e.touches[0].pageY;
        }, false);
        //手指离开屏幕
        document.addEventListener("touchend", function(e) {
            var endx, endy;
            endx = e.changedTouches[0].pageX;
            endy = e.changedTouches[0].pageY;
            var direction = getDirection(startx, starty, endx, endy);
            switch (direction) {
                case 0:
                    alert("未滑动！");
                    break;
                case 1:
                    alert("向上！")
                    break;
                case 2:
                    alert("向下！")
                    break;
                case 3:
                    alert("向左！")
                    break;
                case 4:
                    alert("向右！")
                    break;
                default:
            }
        }, false);
```



## audio相关

[https://zhuanlan.zhihu.com/p/74566301](https://zhuanlan.zhihu.com/p/74566301)



### audio不触发canplaythrough事件

[https://www.cnblogs.com/pingfan1990/p/4595925.html](https://www.cnblogs.com/pingfan1990/p/4595925.html)



```js
var audio = new Audio();
audio.addEventListener("canplaythrough",function(){
    console.log("加载完成！");
},false);
audio.addEventListener("error",function(){
    console.log("加载失败！");
},false);
audio.src = src;
```



看这段代码好像没错，在pc端检测也没有错，但是当我们放到h5上面就会出错，因为手机上面音乐是流媒体加载的，就是说在加载的过程中是可以播放的一边加载一边播放，**canplaythrough 事件在移动端，只有允许audio/video文件加载播放完之后才会执行。**



```js
var audio = new Audio();
//canplaythrough这个事件在手机上流媒体要一边播放才能监听得到，pc端chrome可以完美支持
audio.addEventListener("canplaythrough",function(){
    //我们发现播放完之后这里执行了
    console.log("加载完成！");
},false);
audio.addEventListener("error",function(){
    console.log("加载失败！");
},false);
audio.src = src;
audio.play();
```



![](https://pic4.zhimg.com/v2-bae8255a8b714fc72631a22c61ce5973_r.jpg)









## 元素拖动





[网页链接](http://www.w3school.com.cn/html5/html_5_draganddrop.asp)

```html
<!DOCTYPE HTML>
<html>
<head>
<style type="text/css">
#div1 {width:198px; height:66px;padding:10px;border:1px solid #aaaaaa;}
</style>
<script type="text/javascript">
function allowDrop(ev)
{
ev.preventDefault();
}

function drag(ev)
{
ev.dataTransfer.setData("Text",ev.target.id);
}

function drop(ev)
{
ev.preventDefault();
var data=ev.dataTransfer.getData("Text");
ev.target.appendChild(document.getElementById(data));
}
</script>
</head>
<body>

<p>请把 W3School 的图片拖放到矩形中：</p>

<div id="div1" ondrop="drop(event)" ondragover="allowDrop(event)"></div>
<br />
<img id="drag1" src="/i/eg_dragdrop_w3school.gif" draggable="true" ondragstart="drag(event)" />

</body>
</html>
```

### 设置元素为可拖放

首先，为了使元素可拖动，把 draggable 属性设置为 true ：
`<img draggable="true" />`

### 拖动什么 - ondragstart 和 setData()

然后，规定当元素被拖动时，会发生什么。
在上面的例子中，ondragstart 属性调用了一个函数，drag(event)，它规定了被拖动的数据。
dataTransfer.setData() 方法设置被拖数据的数据类型和值：

```
function drag(ev)
{
ev.dataTransfer.setData("Text",ev.target.id);
}
```

### 放到何处 - ondragover

ondragover 事件规定在何处放置被拖动的数据。
默认地，无法将数据/元素放置到其他元素中。如果需要设置允许放置，我们必须阻止对元素的默认处理方式。
这要通过调用 ondragover 事件的 event.preventDefault() 方法：

```
event.preventDefault()
```

### 进行放置 - ondrop

当放置被拖数据时，会发生 drop 事件。
在上面的例子中，ondrop 属性调用了一个函数，drop(event)：

```
function drop(ev)
{
ev.preventDefault();
var data=ev.dataTransfer.getData("Text");
ev.target.appendChild(document.getElementById(data));
}
```


### 代码解释：

* 调用 preventDefault() 来避免浏览器对数据的默认处理（drop 事件的默认行为是以链接形式打开）
* 通过 dataTransfer.getData("Text") 方法获得被拖的数据。该方法将返回在 setData() 方法中设置为相同类型的任何数据。
* 被拖数据是被拖元素的 id ("drag1")
* 把被拖元素追加到放置元素（目标元素）中





## ios遇到的问题





### ios 滑动不流畅



上下滑动页面会产生卡顿，手指离开页面，页面立即停止运动。整体表现就是滑动不流畅，没有滑动惯性。



**为什么 iOS 的 webview 中 滑动不流畅，它是如何定义的？**





 原来在 iOS 5.0 以及之后的版本，滑动有定义有两个值 `auto` 和 `touch`，默认值为 `auto`。



```css
-webkit-overflow-scrolling: touch; /* 当手指从触摸屏上移开，会保持一段时间的滚动 */

-webkit-overflow-scrolling: auto; /* 当手指从触摸屏上移开，滚动会立即停止 */
```



#### 解决方案



将`-webkit-overflow-scrolling` 值设置为 `touch`

```css
.wrapper {   
	-webkit-overflow-scrolling: touch;
}
```



设置滚动条隐藏：

```css
.container ::-webkit-scrollbar {
    display: none;
}
```



----



设置 overflow



设置外部 `overflow` 为 `hidden`,设置内容元素 `overflow` 为 `auto`。内部元素超出 body 即产生滚动，超出的部分 body 隐藏。



```css
body {
    overflow-y: hidden;
}
.wrapper {
    overflow-y: auto;
}
```





**两者结合使用更佳！**







### ios 上拉边界下拉出现白色空白



手指按住屏幕下拉，屏幕顶部会多出一块白色区域。手指按住屏幕上拉，底部多出一块白色区域。



产生原因



在 iOS 中，手指按住屏幕上下拖动，会触发 `touchmove` 事件。这个事件触发的对象是整个 `webview` 容器，容器自然会被拖动，剩下的部分会成空白。



#### 解决方案



**监听事件禁止滑动**





1. touchstart ：手指放在一个DOM元素上。
2. touchmove ：手指拖曳一个DOM元素。
3. touchend ：手指从一个DOM元素上移开。





**`touchmove` 事件的速度是可以实现定义的，取决于硬件性能和其他实现细节**

**`preventDefault` 方法，阻止同一触点上所有默认行为，比如滚动。**





由此我们找到解决方案，通过监听 `touchmove`，让需要滑动的地方滑动，不需要滑动的地方禁止滑动。



> 值得注意的是我们要过滤掉具有滚动容器的元素。



实现如下：

```js
document.body.addEventListener('touchmove', function(e) {  
if(e._isScroller) return;   
    // 阻止默认事件   
    e.preventDefault();
}, { passive: false
});
```





-----



**滚动妥协填充空白，装饰成其他功能**





在很多时候，我们可以不去解决这个问题，换一直思路。根据场景，**我们可以将下拉作为一个功能性的操作**。



**比如：下拉后刷新页面**







### 页面放大或缩小不确定性行为


 HTML 本身会产生放大或缩小的行为，比如在 PC 浏览器上，可以自由控制页面的放大缩小。但是在移动端，我们是不需要这个行为的。所以，我们需要禁止该不确定性行为，来提升用户体验。



```html
<meta name=viewport content="width=device-width, initial-scale=1.0, minimum-scale=1.0 maximum-scale=1.0, user-scalable=no">
```







### click 点击事件延时与穿透



监听元素 `click` 事件，点击元素触发时间延迟约 `300ms`。

点击蒙层，蒙层消失后，下层元素点击触发。



**为什么会产生 click 延时？**

iOS 中的 safari，为了实现双击缩放操作，在单击 300ms 之后，如果未进行第二次点击，则执行 `click` 单击操作。也就是说来判断用户行为是否为双击产生的。但是，在 App 中，无论是否需要双击缩放这种行为，`click` 单击都会产生 300ms 延迟。

##### 

**为什么会产生 click 点击穿透？**

双层元素叠加时，在上层元素上绑定 `touch` 事件，下层元素绑定 `click` 事件。由于 `click` 发生在 `touch` 之后，点击上层元素，元素消失，下层元素会触发 `click` 事件，由此产生了点击穿透的效果。



-----



#### 解决方案一：使用 touchstart 替换 click



前面已经介绍了，移动设备不仅支持点击，还支持几个触摸事件。那么我们现在基本思路就是用 `touch` 事件代替`click` 事件。



将 `click` 替换成 `touchstart` 不仅解决了 `click` 事件都延时问题，还解决了穿透问题。因为穿透问题是在 `touch` 和 `click` 混用时产生。





开源解决方案中，也是既提供了 `click` 事件，又提供了`touchstart` 事件。如 vant 中的 `button` 组件




**那么，是否可以将 `click` 事件全部替换成 `touchstart` 呢？为什么开源框架还会给出 `click` 事件呢？**





我们想象一种情景，同时需要点击和滑动的场景下。如果将 `click` 替换成 `touchstart` 会怎样？



> 事件触发顺序: `touchstart`, `touchmove`, `touchend`, `click`。



很容易想象，在我需要`touchmove`滑动时候，优先触发了`touchstart`的点击事件，是不是已经产生了冲突呢？



所以呢，在具有滚动的情况下，还是建议使用 `click` 处理。



#### 解决方案二：使用 fastclick 库

使用 `npm/yarn` 安装后使用

```
import FastClick from 'fastclick';FastClick.attach(document.body, options);
```

同样，使用`fastclick`库后，`click` 延时和穿透问题都没了





### iPhone X系列安全区域适配问题

头部刘海两侧区域或者底部区域，出现刘海遮挡文字，或者呈现黑底或白底空白区域。



产生原因

iPhone X 以及它以上的系列，都采用**刘海屏设计**和**全面屏手势**。头部、底部、侧边都需要做特殊处理。才能适配 iPhone X 的特殊情况。



#### 解决方案



**设置安全区域，填充危险区域，危险区域不做操作和内容展示。**



> 危险区域指头部不规则区域，底部横条区域，左右触发区域。 





具体操作为：`viewport-fit` `meta` 标签设置为 `cover`，获取所有区域填充。判断设备是否属于 iPhone X，给头部底部增加**适配层**



`viewport-fit` 有 3 个值分别为：

- `auto`：此值不影响初始布局视图端口，并且整个web页面都是可查看的。
- `contain`：视图端口按比例缩放，以适合显示内嵌的最大矩形。
- `cover`：视图端口被缩放以填充设备显示。强烈建议使用 `safe area inset` 变量，以确保重要内容不会出现在显示之外。



设置 viewport-fit 为 `cover`

```html
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, viewport-fit=cover">
```



增加适配层



使用 `safe area inset` 变量





```
/* 适配 iPhone X 顶部填充*/@supports (top: env(safe-area-inset-top)){  body,  .header{      padding-top: constant(safe-area-inset-top, 40px);      padding-top: env(safe-area-inset-top, 40px);      padding-top: var(safe-area-inset-top, 40px);  }}/* 判断iPhoneX 将 footer 的 padding-bottom 填充到最底部 */@supports (bottom: env(safe-area-inset-bottom)){    body,    .footer{        padding-bottom: constant(safe-area-inset-bottom, 20px);        padding-bottom: env(safe-area-inset-bottom, 20px);        padding-top: var(safe-area-inset-bottom, 20px);    }
```





### 软键盘将页面顶起来、收起未回落问题





Android 手机中，点击 `input` 框时，键盘弹出，将页面顶起来，导致页面样式错乱。

移开焦点时，键盘收起，键盘区域空白，未回落。



**产生原因**

我们在app 布局中会有个固定的底部。安卓一些版本中，输入弹窗出来，会将解压 `absolute` 和 `fixed` 定位的元素。导致可视区域变小，布局错乱。



**原理与解决方案**

软键盘将页面顶起来的解决方案，主要是通过监听页面高度变化，强制恢复成弹出前的高度。



```js
// 记录原有的视口高度
const originalHeight = document.body.clientHeight || document.documentElement.clientHeight;

window.onresize = function(){
  var resizeHeight = document.documentElement.clientHeight || document.body.clientHeight;
  if(resizeHeight < originalHeight ){
    // 恢复内容区域高度
    // const container = document.getElementById("container")
    // 例如 container.style.height = originalHeight;
  }
}
```



键盘不能回落问题出现在 iOS 12+ 和 wechat 6.7.4+ 中，而在微信 H5 开发中是比较常见的 Bug。









### ios弹出键盘再收起点击事件无效



[ https://juejin.im/post/5c07442f51882528c4469769 ]( https://juejin.im/post/5c07442f51882528c4469769 )



我们都知道在H5端是没法监控键盘的弹出与收起的，resize事件触发的机型极其有限，何况我在ios中实测没有触发，安卓反而可以。因为安卓弹起键盘时会修改视窗的大小，但是ios并不会，如果你在ios上设置一个100%高度的body，弹起键盘后你会发现这个body是可以上下滚动的，即100%高度的body超出了视窗。





 ios上一直有个很🐂的优化，弹出键盘时会自动把当前输入框滚动到可视区域，在安卓中会出现键盘遮挡输入框的问题，需要手动调整 



----





ios弹出键盘再收起点击事件无效,Why？



推测是body没有正确重新渲染，导致点击事件不处于body内而无法触发。



那么怎么解决呢，是不是只要把body‘推’会来就行了？ 方向有了，现在是如何‘推’的问题。

上文有说过，ios下弹出/收起键盘是没有触发resize事件的，那么在什么节点触发‘推’的操作就成了问题。





----



 最终解决方案 



```js
    onBlur = (e) => {
        const { onBlur } = this.props;
        document.body && (document.body.scrollTop = document.body.scrollTop);
        onBlur && onBlur(e);
    }
```





 在input输入框失去焦点的钩子中设置滚动到原有位置`(document.body.scrollTop = document.body.scrollTop)`，触发浏览器的重绘，使的错误的渲染回复正常，滚动位置也不会有改变，没有影响体验。 





更为通用的方法



```js
/**
 * 处理iOS 微信客户端6.7.4 键盘收起页面未下移bug
 */
;(/iphone|ipod|ipad/i.test(navigator.appVersion)) && document.addEventListener('blur', (e) => {
    // 这里加了个类型判断，因为a等元素也会触发blur事件
    ['input', 'textarea'].includes(e.target.localName) && document.body.scrollIntoView(false)
}, true)

```





 要在包个定时器才能彻底解决，点击页面其他区域关闭输入法的情况还是会错位

```js
setTimeout(function(){         
    document.body.scrollIntoView(false);    
},200); 
```











### ios的fixed定位问题

通常我们理解的fixed元素的相对于视窗来定位的，但是在ios里，fixed元素是相对于最先的，tranfrom属性不为none（或者will-change不为none）的祖宗元素来定位的。









## 苹果异形屏适配方案



```css
@supports ((height: constant(safe-area-inset-top)) or (height: env(safe-area-inse body {
/* */
padding-top: constant(safe-area-inset-top);
/* */
padding-bottom: constant(safe-area-inset-bottom); }
}
```















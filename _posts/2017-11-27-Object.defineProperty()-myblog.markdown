---
layout:     post
title:      "Object.defineProperty()"
date:       2017-11-27 22:33:00
author:     "Qz"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - ES6
---

> “Yeah It's on. ”


## 正文


[网页链接](http://blog.csdn.net/u011884290/article/details/51941605)

[https://segmentfault.com/a/1190000007434923](https://segmentfault.com/a/1190000007434923)


Object.defineProperty() 方法直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象。

### 语法
Object.defineProperty(obj, prop, descriptor)

* obj 需要定义属性的对象。
* prop 需被定义或修改的属性名。
* descriptor 需被定义或修改的属性的描述符。

### 描述
该方法允许精确添加或修改对象的属性。一般情况下，我们为对象添加属性是通过赋值来创建并显示在属性枚举中（for...in 或 Object.keys 方法）， 但这种方式添加的属性值可以被改变，也可以被删除。而使用 Object.defineProperty() 则允许改变这些额外细节的默认设置。例如，默认情况下，使用 Object.defineProperty() 增加的属性值是不可改变的。

**对象里目前存在的属性描述符有两种主要形式：** 
数据描述符和存取描述符

数据描述符是一个拥有可写或不可写值的属性。存取描述符是由一对 getter-setter 函数功能来描述的属性。描述符必须是两种形式之一；不能同时是两者。


----------


数据描述符和存取描述符均具有以下可选键值：
* configurable: 仅当该属性的 configurable 为 true 时，该属性才能够被改变，也能够被删除。默认为 false
* enumerable: 仅当该属性的 enumerable 为 true 时，该属性才能够出现在对象的枚举属性中。默认为 false
* value: 该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。默认为 undefined
* writable: 仅当仅当该属性的writable为 true 时，该属性才能被赋值运算符改变。默认为 false
* get: 一个给属性提供 getter 的方法，如果没有 getter 则为 undefined。该方法返回值被用作属性值。undefined
* set: 一个给属性提供 setter 的方法，如果没有 setter 则为 undefined。该方法将接受唯一参数，并将该参数的新值分配给该属性。默认为undefined。

```
var obj = {
    test:"hello"
}
//对象已有的属性添加特性描述
Object.defineProperty(obj,"test",{
    configurable:true | false,
    enumerable:true | false,
    value:任意类型的值,
    writable:true | false
});
//对象新添加的属性的特性描述
Object.defineProperty(obj,"newKey",{
    configurable:true | false,
    enumerable:true | false,
    value:任意类型的值,
    writable:true | false
});
```



### 存取器描述
当使用存取器描述属性的特性的时候，允许设置以下特性属性：
```
var obj = {};
Object.defineProperty(obj,"newKey",{
    get:function (){} | undefined,
    set:function (value){} | undefined
    configurable: true | false
    enumerable: true | false
});
```
**注意：当使用了getter或setter方法，不允许使用writable和value这两个属性**


当设置或获取对象的某个属性的值的时候，可以提供getter/setter方法。
* getter 是一种获得属性值的方法
* setter是一种设置属性值的方法。

```
var obj = {};
var initValue = 'hello';
Object.defineProperty(obj,"newKey",{
    get:function (){
        //当获取值的时候触发的函数
        return initValue;    
    },
    set:function (value){
        //当设置值的时候触发的函数,设置的新值通过参数value拿到
        initValue = value;
    }
});
//获取值
console.log( obj.newKey );  //hello

//设置值
obj.newKey = 'change value';

console.log( obj.newKey ); //change value
```
**注意：get或set不是必须成对出现，任写其一就可以。如果不设置方法，则get和set的默认值为undefined
configurable和enumerable同上面的用法。**


### 兼容性
在ie8下只能在DOM对象上使用，尝试在原生的对象使用 Object.defineProperty()会报错。


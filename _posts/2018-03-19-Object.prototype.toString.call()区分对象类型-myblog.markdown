---
layout:     post
title:      "Object.prototype.toString.call()区分对象类型"
date:       2018-03-19 11:31:00
author:     "Qz"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - JavaScript
---

> “Yeah It's on. ”


## 正文
[网页链接](http://blog.csdn.net/u014150409/article/details/46386043)


在JavaScript中数据类型分为：1.基本类型，2.引用类型

基本类型：Undefined，Boolean，String，Number，Null
引用类型：Object (Array,Date,RegExp,Function)
```
var a = 'hello world';
var b = [];
var c = function(){};
```

我们用不同的判断类型的方法来判断上面三个变量的类型；（编译工具webStorm,浏览器Chrome） 
1.首先：typeof( )
```
console.log(typeof (a)+';'+typeof (b)+';'+typeof (c))
输出：string;object;function
```


2.其次：instanceof
```
console.log(a instanceof Object)    //false
console.log(b instanceof Object)    //true
console.log(c instanceof Object)    //true
    console.log(a instanceof Array)     //false
    console.log(b instanceof Array)     //true
    console.log(c instanceof Array)     //false
console.log(a instanceof Function)  //false
console.log(b instanceof Function)  //false
console.log(c instanceof Function)  //true
```


从上面两个例题可以看出，typeof(),insctanceof,这两种方法都只能对简单的变量进行判断，如果比较复杂的变量判断时就会有误，不精确； 

下面我们介绍Object.prototype.toString.call()方法； 

3.Object.prototype.toString.call()
```
console.log(Object.prototype.toString.call(a))
console.log(Object.prototype.toString.call(b))
console.log(Object.prototype.toString.call(c))
输出：
[object String]
[object Array]
[object Function]
```

可以写个方法传值进入判断：
```
function isType(obj,type){
        if(obj != ''){
            return Object.prototype.toString.call(obj)==='[object '+type+']'
        }else{
            alert('对象不能为空')
        }
}
 console.log(isType('hello world','String'))  //true   
```


###那为什么不直接用obj.toString()
同样是检测对象obj调用toString方法（关于toString()方法的用法的可以参考toString的详解），obj.toString()的结果和Object.prototype.toString.call(obj)的结果不一样，这是为什么？

 这是因为toString为Object的原型方法，而Array ，function等类型作为Object的实例，都重写了toString方法。不同的对象类型调用toString方法时，根据原型链的知识，调用的是对应的重写之后的toString方法（function类型返回内容为函数体的字符串，Array类型返回元素组成的字符串.....），而不会去调用Object上原型toString方法（返回对象的具体类型），所以采用obj.toString()不能得到其对象类型，只能将obj转换为字符串类型；因此，在想要得到对象的具体类型时，应该调用Object上原型toString方法。

我们可以验证一下，将数组的toString方法删除，看看会是什么结果：
```
var arr=[1,2,3];
console.log(Array.prototype.hasOwnProperty("toString"));//true
console.log(arr.toString());//1,2,3
delete Array.prototype.toString;//delete操作符可以删除实例属性
console.log(Array.prototype.hasOwnProperty("toString"));//false
console.log(arr.toString());//"[object Array]"
```

删除了Array的toString方法后，同样再采用arr.toString()方法调用时，不再有屏蔽Object原型方法的实例方法，因此沿着原型链，arr最后调用了Object的toString方法，返回了和Object.prototype.toString.call(arr)相同的结果。


**千万不能使用typeof来判断对象和数组，因为这两种类型都会返回"object"。**

### 进行封装
可以写个方法传值进入判断：
```
function isType(obj,type){
        if(obj != ''){
            return Object.prototype.toString.call(obj)==='[object '+type+']'
        }else{
            alert('对象不能为空')
        }
}
 console.log(isType('hello world','String'))  //true   
```

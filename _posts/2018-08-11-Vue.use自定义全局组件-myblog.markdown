---
layout:     post
title:      "Vue.use自定义全局组件"
date:       2018-08-11 19:28:00
author:     "Qz"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - Vue
---

> “Yeah It's on. ”


## 正文
[网页链接](https://www.cnblogs.com/yesyes/p/6658611.html)

首先，在main.js里
```javascript
import Vue from 'vue'
import App from './App.vue'

// 引入自定义组件。index.js是组件的默认入口
import Loading from '../components/loading/index'
Vue.use(Loading);

Vue.use(ElementUi);
new Vue({
  el: '#app',
  render: h => h(App)
})
```


然后在Loading.vue里面定义自己的组件模板
```
<!-- 这里和普通组件的书写一样 -->
<template>
    <div class="loading">
        loading...
    </div>
</template>
```


在index.js文件里面添加install方法
```
import MyLoading from './Loading.vue'
// 这里是重点
const Loading = {
    install: function(Vue){
        Vue.component('Loading',MyLoading)
    }
}

// 导出组件
export default Loading
```


这样就可以在仍何地方使用Loading组件了



## 补充


### Vue.extend( options )

参数： {Object} options


使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。

data 选项是特例，需要注意 - 在 Vue.extend() 中它必须是函数



```
<div id="mount-point"></div>
```

```
// 创建构造器
var Profile = Vue.extend({
  template: '<p>{{firstName}} {{lastName}} aka {{alias}}</p>',
  data: function () {
    return {
      firstName: 'Walter',
      lastName: 'White',
      alias: 'Heisenberg'
    }
  }
})
// 创建 Profile 实例，并挂载到一个元素上。
new Profile().$mount('#mount-point')
```

结果如下：
```
<p>Walter White aka Heisenberg</p>
```


----------



例子：


```
import Vue from 'vue'
import imagePreviewer from './imagePreviewer.vue'
const ImagePreviewer = Vue.extend(imagePreviewer)

...

let instance = new ImagePreviewer()

    instance.vm = instance.$mount()
    instance.vm.src = [src]
    instance.vm.background = background
    instance.dom = instance.vm.$el
    instance.sourceDom = evt.target
```




---
layout:     post
title:      "js面向对象之屏蔽属性"
date:       2018-03-17 19:54:00
author:     "Qz"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - JavaScript
---

> “Yeah It's on. ”


## 正文
[网页链接](https://segmentfault.com/a/1190000008142704)


### 什么是屏蔽属性
一条赋值语句引出的思考：

`myObject.foo = "bar";`

如果myObject 对象中包含名为foo 的普通数据访问属性，这条赋值语句只会修改已有的属性值。

如果foo 不是直接存在于myObject 中，[[Prototype]] 链就会被遍历，类似[[Get]] 操作。如果原型链上找不到foo，foo 就会被直接添加到myObject 上。然而，如果foo 存在于原型链上层，赋值语句myObject.foo = "bar" 的行为就会有些不同（而且可能很出人意料）。稍后我们会进行介绍。
如果属性名foo 既出现在myObject 中也出现在myObject 的[[Prototype]] 链上层， 那么就会发生屏蔽。myObject 中包含的foo 属性会屏蔽原型链上层的所有foo 属性，因为myObject.foo 总是会选择原型链中最底层的foo 属性。


### 屏蔽比我们想象中更加复杂
下面我们分析一下如果foo 不直接存在于myObject 中而是存在于原型链上层时myObject.foo = "bar" 会出现的三种情况。

* 如果在[[Prototype]] 链上层存在名为foo 的普通数据访问属性并且没有被标记为只读（writable:false），那就会直接在myObject 中添加一个名为foo 的新属性，它是屏蔽属性。
* 如果在[[Prototype]] 链上层存在foo，但是它被标记为只读（writable:false），那么无法修改已有属性或者在myObject 上创建屏蔽属性。如果运行在严格模式下，代码会抛出一个错误。否则，这条赋值语句会被忽略。总之，不会发生屏蔽。
* 如果在[[Prototype]] 链上层存在foo 并且它是一个setter（参见第3 章），那就一定会调用这个setter。foo 不会被添加到（或者说屏蔽于）myObject，也不会重新定义foo 这个setter。


[http://www.cnblogs.com/ziyunfei/archive/2012/10/31/2738728.html](http://www.cnblogs.com/ziyunfei/archive/2012/10/31/2738728.html)


















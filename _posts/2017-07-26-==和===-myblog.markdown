---
layout:     post
title:      "==和===区别"
date:       2017-07-26 11:00:00
author:     "Qz"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - JavaScript
---

> “Yeah It's on. ”


## 正文
[网页链接](http://blog.csdn.net/wxdzxl/article/details/8502119)

作者：云澹
链接：https://www.zhihu.com/question/31442029/answer/53641960
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

 ===叫做严格运算符 ==叫做相等运算符。严格运算符的运算规则如下
1. 不同类型值如果两个值的类型不同，直接返回false。
2. 同一类的原始类型值同一类型的原始类型的值（数值、字符串、布尔值）比较时，值相同就返回true，值不同就返回false
3. 同一类的复合类型值两个复合类型（对象、数组、函数）的数据比较时，不是比较它们的值是否相等，而是比较它们是否指向同一个对象。
4. undefined和nullundefined 和 null 与自身严格相等。
null === null  //true
undefined === undefined  //true


相等运算符在比较相同类型的数据时，与严格相等运算符完全一样。
在比较不同类型的数据时，相等运算符会先将数据进行类型转换，然后再用严格相等运算符比较。类型转换规则如下：
1. 原始类型的值原始类型的数据会转换成数值类型再进行比较。字符串和布尔值都会转换成数值，所以题主的问题中会有第二个string输出。
2. 对象与原始类型值比较对象（这里指广义的对象，包括数值和函数）与原始类型的值比较时，对象转化成原始类型的值，再进行比较。
3. undefined和null与其他类型的值比较时，结果都为false，它们互相比较时结果为true。
4. 相等运算符的缺点相等运算符隐藏的类型转换，会带来一些违反直觉的结果。'' == '0'           // false
0 == ''             // true
0 == '0'            // true

false == 'false'    // false
false == '0'        // true

false == undefined  // false
false == null       // false
null == undefined   // true

' \t\r\n ' == 0     // true

'\n  123  \t' == 123 // true
// 因为字符串转为数字时，省略前置和后置的空格
---

## 后记
```
var a = undefined;
if(a == null){
    console.log("1"); //1
}

var a = undefined;
if(a === null){
    console.log("1"); //无输出
}
```


alert(true == 1);  //ture
alert(true == 2); //false, true会转换成number，也就是1，当然 1 不等于 2

1 === "1" // false
true === "true" // false

---

[1] == 1 // true
// 等同于 Number([1]) == 1

[1] == '1' // true
// 等同于 String([1]) == Number('1')

[1] == true // true
// 等同于 Number([1]) == Number(true)



false == null // false
false == undefined // false

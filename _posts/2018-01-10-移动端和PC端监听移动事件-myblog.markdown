---
layout:     post
title:      "移动端和PC端监听移动事件"
date:       2018-01-10 23:36:00
author:     "Qz"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - JavaScript
---

> “Yeah It's on. ”

http://blog.csdn.net/kk_yanwu/article/details/73251310




## 移动端

* touchstart：触摸开始的时候触发
* touchmove：手指在屏幕上滑动的时候触发
* touchend：触摸结束的时候触发

会传入event参数

**event里面有**
1. touches：表示当前跟踪的触摸操作的touch对象的数组。
2. targetTouches：特定于事件目标的Touch对象的数组。
3. changeTouches：表示自上次触摸以来发生了什么改变的Touch对象的数组。


每个touches包含的属性
1. clientX：触摸目标在视口中的x坐标。
2. clientY：触摸目标在视口中的y坐标。
3. identifier：标识触摸的唯一ID。
4. pageX：触摸目标在页面中的x坐标。
5. pageY：触摸目标在页面中的y坐标。
6. screenX：触摸目标在屏幕中的x坐标。
7. screenY：触摸目标在屏幕中的y坐标。
8. target：触目的DOM节点目标。 


### 注意
**在touchend里的event获取不到touches[0]只能获取changeTouches[0]**

在Vue中
```
<template>
  <div class="singer2"
       @touchstart.prevent="onTouchStart"
       @touchmove.prevent="onTouchMove"
       @touchend.prevent="onTouchEnd">
  </div>
</template>

<script type="text/ecmascript-6">
  export default{
    created(){
      this.touch = {}
    },
    methods: {
      onTouchStart(e){
        this.touch.initiated = true
        // 用来判断是否为一次移动
        this.touch.moved = false
        const touch = e.touches[0]
        this.touch.startX = touch.pageX
        this.touch.startY = touch.pageY
      },
      onTouchMove(e){
        if (!this.touch.initiated) {
          return
        }
        const touch = e.touches[0]
        const deltaX = touch.pageX - this.touch.startX
        const deltaY = touch.pageY - this.touch.startY
        console.log(`在x轴移动: ${deltaX}`)
        console.log(`在y轴移动: ${deltaY}`)
//        if (Math.abs(deltaY) > Math.abs(deltaX)) {
//          // 手指在Y轴的趋势比在X轴明显
//          return
//        }
        if (!this.touch.moved) {
          this.touch.moved = true
        }
      },
      onTouchEnd(){
        if (!this.touch.moved) {
          return
        }
        // ...
        // 剩下操作
        this.touch.initiated = false
      }
    }
  }
</script>
```

## PC端
**有一点要非常非常地注意:
mousedown在Dom元素上监听，而mousemove和mouseup要在document上监听。**


### 反面例子
```
//拖动
var ismove = false; //标记移动
var initMove = false; //一次移动的开始
var _x, _y; //鼠标距离左上角的位置
$(document).ready(function () {
    $("#spig").mousedown(function (e) {
        console.log("开始移动")
        initMove = true;
    }).mousemove(function (e) {
        if (initMove) {
            console.log("移动中")
        }
    }).mouseup(function (e) {
        console.log("移动结束")
        initMove = false;
    })
})
```

**这样纸只能监听鼠标在spig元素上的事件，一旦离开了spig元素就无法监听，这不能满足我们的需求**

### 正面例子
拖动：
```
var isMove = false; //标记移动
var initMove = false; //一次移动的开始
var _x, _y; //鼠标距离左上角的位置
$(document).ready(function () {
    $("#spig").mousedown(function (e) {
        initMove = true;
        _x = e.pageX - parseInt($("#spig").css("left"));
        _y = e.pageY - parseInt($("#spig").css("top"));
    })
    $(document).mousemove(function (e) {
        if (initMove) {
            var x = e.pageX - _x;
            var y = e.pageY - _y;
            var wx = $(window).width() - $("#spig").width()
            var dy = $(document).height() - $("#spig").height()
            if (x > 0 && x <= wx && y > 0 && y <= dy) {
                $("#spig").css({
                    top: y,
                    left: x
                })
            }
            isMove = true;
        }
    }).mouseup(function () {
        if (initMove && isMove) {
            initMove = false;
            isMove = false;
        }
    })
})
```


#### 值得学习点
$("#spig").css("left")
得到的结果是 xx px

所以采用
parseInt($("#spig").css("left"))
这样得到的结果是 xx //纯数字


----------


```
var _x, _y; //鼠标离控件左上角的相对位置
_x = e.pageX - parseInt($("#spig").css("left"));
_y = e.pageY - parseInt($("#spig").css("top"));
````



----------


$(window).width()
是获得整个窗体的宽度
$(document).height()
是获得整个文档的高度  可能会大于$(window).height() //窗体高度

>在这个例子中允许拖动的高度应该是$(document).height() - $('#spig').height();


----------






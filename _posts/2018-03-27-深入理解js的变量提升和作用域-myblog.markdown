---
layout:     post
title:      "深入理解js的变量提升和函数提升"
date:       2018-03-27 16:14:00
author:     "Qz"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - JavaScript
---

> “Yeah It's on. ”


## 正文
[网页链接](https://www.cnblogs.com/kawask/p/6225317.html)

### 变量提升
在ES6之前，JavaScript没有块级作用域(一对花括号{}即为一个块级作用域)，只有全局作用域和函数作用域。变量提升即将变量声明提升到它所在作用域的最开始的部分。上个简历的例子如：
```
console.log(global); // undefined
var global = 'global';
console.log(global); // global
 
function fn () {
　　console.log(a); // undefined
　　var a = 'aaa';
　　console.log(a); // aaa
}
fn();
```

之所以会是以上的打印结果，是由于js的变量提升，实际上上面的代码是按照以下来执行的：
```

var global; // 变量提升，全局作用域范围内，此时只是声明，并没有赋值
console.log(global); // undefined
global = 'global'; // 此时才赋值
console.log(global); // 打印出global
 
function fn () {
　　var a; // 变量提升，函数作用域范围内
　　console.log(a);
　　a = 'aaa';
　　console.log(a);
}
fn();
```


### 函数提升
　　js中创建函数有两种方式：函数声明式和函数字面量式。只有函数声明才存在函数提升！如:
```
console.log(f1); // function f1() {}   
console.log(f2); // undefined  
function f1() {}
var f2 = function() {}
```
　只所以会有以上的打印结果，是由于js中的函数提升导致代码实际上是按照以下来执行的：

```
function f1() {} // 函数提升，整个代码块提升到文件的最开始
console.log(f1);   
console.log(f2);   
var f2 = function() {}
```


### 函数作用域跟块级作用域
* 函数作用域：变量在定义的函数内及嵌套的子函数内处处可见
* 块级函数域：变量在离开定义的块级代码后马上被回收。

那么为什么两者会有这样的区别呢？
因为在函数作用域内，变量声明有一个提升hoisting的过程。
```
    (function () {
        console.log(b)
        console.log(c)
        var b =3
        let c = 3
    })();
```

 let定义的变量具有块级作用域，待会讲。

如果var定义的变量跟let定义的变量一样没有hoisting的过程，那么两者应该都是ReferenceError，但是结果发现b是undefined，说明b发生了提升


----------


那如果在提升的时候发生重命名了怎么办？
```
   (function () {
        function a() {

        }

        console.log(a)
        var a = 12
        console.log(a);
        var a = 'aaa'
        console.log(a)
    })();
```
是这样吗？
```
    (function () {
        function a() {

        }

        var a;
        var a;
        console.log(a)
        a = 12
        console.log(a);
        a = 'aaa'
        console.log(a)
    })();
```
那么之后的var a为什么没有覆盖掉function a(){}这个定义，使第一个打印为undefined？


因为编译器在遇到变量声明时（函数表达式可以理解为包含了声明和赋值的操作），会先查看当前作用域，如果该变量不存在，则在该作用域中声明该变量；如果存在，则会忽略该声明。


所以，正确代码:
```
    (function () {
        function a() {

        }

        console.log(a)
        a = 12
        console.log(a)
        a = 'aaa'
        console.log(a)
    })();
```


>注意不要把a跟隐式全局变量混淆。


**立即执行函数不存在提升的情况**

### 块级作用域


#### let关键字
let定义的变量遵从块级作用域，不会提升，不会在整个函数域内起作用。



#### const关键字
const定义的变量是在let的基础上，增加了必须在声明时赋值为一个常量的限制



#### 块中定义的函数声明
**直接在函数体内定义的函数声明，整个都会提前；**

**但是在块中定义的函数声明，只会提升其声明部分，不分配实际的内存空间**

```
    (function () {
        console.log(a)
        console.log(b)
        {
            function a() {
                alert("haha")
            }
        }
        function b() {
        }
    })();
```

输出结果
```
undefined
ƒ b() {
        }
```

## 补充

### 词法作用域 
**词法作用域中是在函数内变量作用域是再定义处(即代码书写处)的作用域**


看下面一个例子


```javascript
var bo = 10;
function foo() {
// console.log(this) 此处this一直指向window 所以this.bo一直是10
  console.log(bo);
}
(function() {
  var bo = 20;
  foo();
})();
(function (func) {
  var bo = 30;
  func();
})(foo)

输出结果 10 10
```

　无论函数在哪里被调用，也无论它如何被调用，它的词法作用域都只由函数被声明时所处的位置决定





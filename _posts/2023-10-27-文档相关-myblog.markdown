---
layout:     post
title:      "文档相关"
date:       2023-10-27 18:06:00
author:     "Qz"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - Other
---

> “Yeah It's on. ”



# typedoc 

[https://typedoc.org/guides/overview/](https://typedoc.org/guides/overview/)

TypeDoc 是 TypeScript 的文档生成器，是一个读取 TypeScript 源文件的工具



## 使用

```json
 // pacakage.json
 
 "scripts": {
    "doc": "typedoc"
  },
```



```json
// typedoc.json

{
  "$schema": "https://typedoc.org/schema.json",
  "out": "docs",
  "entryPoints": ["src/modules/callApi/index.ts"],
  "exclude": [],
  "disableSources": true,  // 重要
  "includeVersion": true,
  "excludeExternals": true,
  "excludePrivate": true,
  "hideGenerator": true
}
```

$schema 键是一个可选属性，TypeDoc 将忽略它，但在 VSCode 和其他支持 JSON 架构的编辑器中编辑文件时将提供自动完成和键验证。

disableSources: true

TypeDoc 的 output 默认带上了每个api的Defined来自的地方，看起来非常的不干净，disableSources可以干掉Defined相关的东西

[Disable "Defined in:"](https://github.com/TypeStrong/typedoc/issues/808)





## 问题 



### not supported in watch mode

```bash
"doc:watch": "typedoc --watch"
```

报错 error:

```bash
[error] The provided tsconfig file looks like a solution style tsconfig, which is not supported in watch mode
```

在使用 TypeDoc 生成文档时，如果你的项目使用了 TypeScript 的项目引用，你需要手动处理每个子项目的文档生成，或使用脚本来协调这些任务。TypeDoc 目前不支持监视模式，你可以使用 `nodemon` 这样的工具来监视文件变化并在变化时运行生成文档的脚本。通过这些方法，你可以在项目引用的环境中生成 TypeDoc 文档。

---

TypeScript 的项目引用:

```ts
// tsconfig.json
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
```


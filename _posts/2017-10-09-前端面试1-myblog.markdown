---
layout:     post
title:      "前端面试相关"
date:       2017-10-09 22:06:00
author:     "Qz"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - 面试
---

> “Yeah It's on. ”


## 正文
 
### typeof 运算符

 - typeof undefined   结果  "undefined" 
 - typeof 'abc'  结果  "string"
 - typeof 123   结果  "number" 
 - typeof true  结果  "boolean" 
 - typeof {}  结果  "object" 
 - typeof []   结果  "object"
 - <strong>typeof null  结果 "object"</strong>
 -  typeof console.log   结果  "function"



### 原型和原型链

所有的引用类型（数组、对象、函数），都有一个__proto__属性，属性值是一个普通的对象

所有的函数，都有一个 prototype 属性，属性值也是一个普通的对象

所有的引用类型（数组、对象、函数），__proto__属性值指向它的构造函数的 ”prototype“ 属性值

 当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的 __proto__（即它的构造函数的prototype）中寻找。
 
#### instanceof
f instanceof Foo 的判断逻辑是：
f 的 __proto__ 一层一层往上，能否对应到 Foo.prototype
再试着判断 f instanceof Object


### 构造函数

 1. var a = {} 其实是 var a = new Object() 的语法糖
 2.  var a = [] 其实是 var a = new Array() 的语法糖
 3. function Foo(){...} 其实是 var Foo = new Function(...)
 4. 使用 instanceof 判断一个函数是否是一个变量的构造函数

 所有的引用类型（数组、对象、函数），都具有对象特性，即可自由扩展属性（除了“null”以外）

### 作用域和闭包

this 要在执行时才能确认值，定义时无法确认


### 其他

obj.a == null
相当于 obj.a === null || obj.a === undefined

问题：如何理解JSON
JSON 是一个JS对象

```
var item
for(item in f){
  // 高级浏览器已经在 for in 中屏蔽了来自原型的属性
  // 但是为了程序的健壮性 建议加上
  if(f.hasOwnProperty(item)) {
     console.log(item)
  }
}
```

问题：如何准确判断一个变量是数组类型
```
var arr = []
arr instanceof Array //true
typeof arr // Object  typeof是无法判断是否为数组的
```

